<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>李鹏的个人博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-06T09:47:07.858Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>李鹏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue基础知识</title>
    <link href="http://yoursite.com/2020/06/06/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2020/06/06/vue%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</id>
    <published>2020-06-06T09:27:47.941Z</published>
    <updated>2020-06-06T09:47:07.858Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue的基础"><a href="#Vue的基础" class="headerlink" title="Vue的基础"></a>Vue的基础</h1><h3 id="1-入门示例"><a href="#1-入门示例" class="headerlink" title="1.入门示例"></a>1.入门示例</h3><h4 id="1-1、安装"><a href="#1-1、安装" class="headerlink" title="1.1、安装"></a>1.1、安装</h4><h5 id="A-在开发初期，我们只需要使用cdn嵌入方式，并且格式-不能是压缩格式-指min-，因为压缩格式在开发初期不会提示错误，对初学者不利"><a href="#A-在开发初期，我们只需要使用cdn嵌入方式，并且格式-不能是压缩格式-指min-，因为压缩格式在开发初期不会提示错误，对初学者不利" class="headerlink" title="A.在开发初期，我们只需要使用cdn嵌入方式，并且格式 不能是压缩格式(指min)，因为压缩格式在开发初期不会提示错误，对初学者不利"></a>A.在开发初期，我们只需要使用cdn嵌入方式，并且格式 不能是压缩格式(指min)，因为压缩格式在开发初期不会提示错误，对初学者不利</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="B-NPM安装"><a href="#B-NPM安装" class="headerlink" title="B.NPM安装"></a>B.NPM安装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 最新稳定版</span><br><span class="line">$ npm install vue</span><br></pre></td></tr></table></figure><h4 id="1-2、第一个Vue项目"><a href="#1-2、第一个Vue项目" class="headerlink" title="1.2、第一个Vue项目"></a>1.2、第一个Vue项目</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Vue 测试实例 - 菜鸟教程(runoob.com)&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="https:/</span><span class="regexp">/cdn.jsdelivr.net/</span>npm/vue/dist/vue.js<span class="string">"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div id="</span>app<span class="string">"&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;      &lt;!--  利用插值语法插入Vue实例中data的数据   --!&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;script&gt;</span></span><br><span class="line"><span class="string">new Vue(&#123;</span></span><br><span class="line"><span class="string">  el: '#app',</span></span><br><span class="line"><span class="string">  data: &#123;</span></span><br><span class="line"><span class="string">    message: 'Hello Vue.js!' &lt;!--  将message的数据在页面显示出来   --!&gt;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br><span class="line"><span class="string">&lt;/script&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">&lt;/html&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">展示结果</span><br><span class="line">Hello Vue.js</span><br></pre></td></tr></table></figure><h3 id="2-内部指令"><a href="#2-内部指令" class="headerlink" title="2.内部指令"></a>2.内部指令</h3><h4 id="2-1-插值语法-———-gt-、v-html、v-text、v-clock"><a href="#2-1-插值语法-———-gt-、v-html、v-text、v-clock" class="headerlink" title="2.1 插值语法     ———&gt;     、v-html、v-text、v-clock"></a>2.1 插值语法     ———&gt;     {{}}、v-html、v-text、v-clock</h4><h5 id="A"><a href="#A" class="headerlink" title="A.    "></a>A.    {{}}</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h5 id="B-v-html-可以解析html标签，类似于innerHTML"><a href="#B-v-html-可以解析html标签，类似于innerHTML" class="headerlink" title="B.    v-html    可以解析html标签，类似于innerHTML"></a>B.    v-html    可以解析html标签，类似于innerHTML</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div v-html=<span class="string">"message"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'&lt;h1&gt;得玛西亚&lt;/h1&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="C-v-text-不能解析html标签，类似于innerText"><a href="#C-v-text-不能解析html标签，类似于innerText" class="headerlink" title="C.    v-text   不能解析html标签，类似于innerText"></a>C.    v-text   不能解析html标签，类似于innerText</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div v-text=<span class="string">"message"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">    </span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'得玛西亚'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="D-v-cloak-防止闪烁，当网速较慢时实例未生成出现原标签"><a href="#D-v-cloak-防止闪烁，当网速较慢时实例未生成出现原标签" class="headerlink" title="D.    v-cloak  防止闪烁，当网速较慢时实例未生成出现原标签"></a>D.    v-cloak  防止闪烁，当网速较慢时实例未生成出现{{}}原标签</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">解决方案：</span><br><span class="line">&lt;style&gt;</span><br><span class="line">        [v-cloak] &#123;</span><br><span class="line">          display: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;<span class="regexp">/style&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div v-cloak&gt;</span></span><br><span class="line"><span class="regexp">      &#123;&#123; message &#125;&#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2、条件指令-——-gt-v-if-v-else-v-else-if-v-show"><a href="#2-2、条件指令-——-gt-v-if-v-else-v-else-if-v-show" class="headerlink" title="2.2、条件指令     ——-&gt;    v-if,v-else,v-else-if,v-show"></a>2.2、条件指令     ——-&gt;    v-if,v-else,v-else-if,v-show</h4><h5 id="A-v-if-v-else-v-else-if一般连用"><a href="#A-v-if-v-else-v-else-if一般连用" class="headerlink" title="A.    v-if,v-else,v-else-if一般连用"></a>A.    v-if,v-else,v-else-if一般连用</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div v-<span class="keyword">if</span>=<span class="string">"type === 'A'"</span>&gt;</span><br><span class="line">        A</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-else-if="type === 'B'"&gt;</span></span><br><span class="line"><span class="regexp">    B</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line">&lt;div v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">"type === 'C'"</span>&gt;</span><br><span class="line">    C</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-else&gt;</span></span><br><span class="line"><span class="regexp">    Not A/</span>B/C</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            type: <span class="string">'C'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="B-v-show-—-动态显示与隐藏"><a href="#B-v-show-—-动态显示与隐藏" class="headerlink" title="B.    v-show   —-动态显示与隐藏"></a>B.    v-show   —-动态显示与隐藏</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-show=<span class="string">"ok"</span>&gt;Hello!&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    new Vue(&#123;</span></span><br><span class="line"><span class="regexp">    el: '#app',</span></span><br><span class="line"><span class="regexp">    data: &#123;</span></span><br><span class="line"><span class="regexp">        ok: 'true'</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：    v-if与v-show的区别</strong></p><p>​    <strong>v-if是动态的创建与删除，切换开销很大，如果需要非常频繁的切换就使用v-show</strong></p><p>​    ** v-show是动态的显示与隐藏，初始话开销很大，如果运行条件很少改变就使用v-if ** </p><h4 id="2-3-循环指令-——–-gt-v-for"><a href="#2-3-循环指令-——–-gt-v-for" class="headerlink" title="2.3  循环指令       ——–&gt;           v-for"></a>2.3  循环指令       ——–&gt;           v-for</h4><h5 id="v-for类似于原生js的for循环-可以对对象，数组，整数进行迭代"><a href="#v-for类似于原生js的for循环-可以对对象，数组，整数进行迭代" class="headerlink" title="v-for类似于原生js的for循环  可以对对象，数组，整数进行迭代"></a>v-for类似于原生js的for循环  可以对对象，数组，整数进行迭代</h5><p>语法形式：v-for=”(第一个参数, 第二个参数, 第三个参数) in 迭代数据”</p><ul><li><p>第一个参数：一条一条的数据的显示</p></li><li><p>第二个参数：对象时是键名，其他为索引</p></li><li><p>第三个参数：索引值</p><p>注：可以只写一个参数或多个参数，再用v-for循环时最好时动态绑定一个key值，防止重名之内,key值必须是一个唯一值，不能重复</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"example-1"</span>&gt;</span><br><span class="line">  &lt;li v-<span class="keyword">for</span>=<span class="string">"item in items"</span> :key=<span class="string">"item.message"</span>&gt;</span><br><span class="line">    &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">&lt;/u</span>l&gt;</span><br><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-1'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">'Foo'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">message</span>: <span class="string">'Bar'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-4-动态绑定事件与属性-—-gt-v-on-v-bind"><a href="#2-4-动态绑定事件与属性-—-gt-v-on-v-bind" class="headerlink" title="2.4  动态绑定事件与属性       —&gt;   v-on(@),v-bind(:)"></a>2.4  动态绑定事件与属性       —&gt;   v-on(@),v-bind(:)</h4><h5 id="A：-v-on动态绑定事件，原生js的事件都能绑定，不用加on-click-mousedown-，简写"><a href="#A：-v-on动态绑定事件，原生js的事件都能绑定，不用加on-click-mousedown-，简写" class="headerlink" title="A：    v-on动态绑定事件，原生js的事件都能绑定，不用加on(click,mousedown)，简写   @"></a>A：    v-on动态绑定事件，原生js的事件都能绑定，不用加on(click,mousedown)，简写   @</h5><p>​    注意：</p><p>​        1.当事件不加小括号时，默认传递参数$event，在函数中定义实参可以获得，</p><p>​        2.如果事件加了小括号没有传递参数就没有事件对象，加了小括号必须要传递一个参数$event,函数中才能拿到事件对象</p><ul><li><h6 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a.&lt;!-- 阻止单击事件冒泡 --&gt;</span><br><span class="line">&lt;a v-on:click.stop=<span class="string">"doThis"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">b.&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;form v-on:submit.prevent="onSubmit"&gt;&lt;/</span>form&gt;</span><br><span class="line">c.&lt;!-- 修饰符可以串联  --&gt;</span><br><span class="line">&lt;a v-on:click.stop.prevent=<span class="string">"doThat"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">d.&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;form v-on:submit.prevent&gt;&lt;/</span>form&gt;</span><br><span class="line">e.&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span><br><span class="line">&lt;div v-on:click.capture=<span class="string">"doThis"</span>&gt;...&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">f.&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="regexp">&lt;div v-on:click.self="doThat"&gt;...&lt;/</span>div&gt;</span><br><span class="line">g.&lt;!-- click 事件只能点击一次，<span class="number">2.1</span><span class="number">.4</span>版本新增 --&gt;</span><br><span class="line">&lt;a v-on:click.once=<span class="string">"doThis"</span>&gt;&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h6 id="按键修饰符—可以根据ascll码值找到对应的按键"><a href="#按键修饰符—可以根据ascll码值找到对应的按键" class="headerlink" title="按键修饰符—可以根据ascll码值找到对应的按键"></a>按键修饰符—可以根据ascll码值找到对应的按键</h6><p>例如：&lt;input v-on:keyup.ascll码值(例如13)=”submit”&gt;</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">常用键的别名:</span><br><span class="line">.enter</span><br><span class="line">    .tab</span><br><span class="line">    .delete (捕获 <span class="string">"删除"</span> 和 <span class="string">"退格"</span> 键)</span><br><span class="line">    .esc</span><br><span class="line">    .space</span><br><span class="line">    .up</span><br><span class="line">    .down</span><br><span class="line">    .left</span><br><span class="line">    .right</span><br><span class="line">    .ctrl</span><br><span class="line">    .alt</span><br><span class="line">    .shift</span><br><span class="line">    .meta</span><br></pre></td></tr></table></figure></li></ul><h5 id="B：-v-bind动态绑定属性，如果属性的值是动态的需要使用v-bind绑定属性使其解析变量，简写"><a href="#B：-v-bind动态绑定属性，如果属性的值是动态的需要使用v-bind绑定属性使其解析变量，简写" class="headerlink" title="B：    v-bind动态绑定属性，如果属性的值是动态的需要使用v-bind绑定属性使其解析变量，简写  :"></a>B：    v-bind动态绑定属性，如果属性的值是动态的需要使用v-bind绑定属性使其解析变量，简写  :</h5><p>​    （1）绑定css和style</p><p>​        都可以使用数组语法与对象语法，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态绑定外部类名---对象方法</span></span><br><span class="line">v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"&#123; active: isActive, 'text-danger': hasError &#125;"</span></span><br><span class="line"><span class="comment">//数组方法</span></span><br><span class="line">&lt;div v-bind:<span class="class"><span class="keyword">class</span></span>=<span class="string">"[activeClass, errorClass]"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/动态绑定内联样式---对象方法</span></span><br><span class="line"><span class="regexp">&lt;div v-bind:style="&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"&gt;&lt;/</span>div&gt;</span><br><span class="line"><span class="comment">//数组方法</span></span><br><span class="line">&lt;div v-bind:style=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/三元表达式切换样式</span></span><br><span class="line"><span class="regexp">&lt;div v-bind:class="[isActive ? activeClass : '', errorClass]"&gt;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><h4 id="2-5-双向数据绑定-—-gt-v-model"><a href="#2-5-双向数据绑定-—-gt-v-model" class="headerlink" title="2.5    双向数据绑定            —-&gt;        v-model"></a>2.5    双向数据绑定            —-&gt;        v-model</h4><h5 id="A：-v-model监控表单的数据，数据随表单的数据变化而变化"><a href="#A：-v-model监控表单的数据，数据随表单的数据变化而变化" class="headerlink" title="A：    v-model监控表单的数据，数据随表单的数据变化而变化"></a>A：    v-model监控表单的数据，数据随表单的数据变化而变化</h5><p><strong>（1）input</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"text"</span> v-model=<span class="string">"message"</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>（2）textarea</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea  cols=<span class="string">"30"</span> rows=<span class="string">"10"</span> v-model=<span class="string">"message"</span>&gt;&lt;<span class="regexp">/textarea&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（3）checkbox</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"checkbox"</span> id=<span class="string">"first"</span> value=<span class="string">"1"</span> v-model=<span class="string">"status"</span>&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"first"</span>&gt;有效&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="checkbox" id="second" value="2" v-model="status"&gt;</span></span><br><span class="line"><span class="regexp">&lt;label for="second"&gt;无效&lt;/</span>label&gt;</span><br><span class="line">&lt;div&gt;状态：&#123;&#123;status&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（4）radio</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"radio"</span> id=<span class="string">"one"</span> value=<span class="string">"男"</span> v-model=<span class="string">"sex"</span>&gt;</span><br><span class="line">&lt;label <span class="keyword">for</span>=<span class="string">"one"</span>&gt;男&lt;<span class="regexp">/label&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="radio" id="two" value="女" v-model="sex"&gt;</span></span><br><span class="line"><span class="regexp">&lt;label for="one"&gt;女&lt;/</span>label&gt;</span><br><span class="line">&lt;div&gt;性别：&#123;&#123;sex&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p><strong>（5）select</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;select v-model=<span class="string">"selected"</span>&gt;</span><br><span class="line">    &lt;option disabled value=<span class="string">""</span>&gt;请选择&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">    &lt;option&gt;A&lt;/</span>option&gt;</span><br><span class="line">    &lt;option&gt;B&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">    &lt;option&gt;C&lt;/</span>option&gt;</span><br><span class="line">&lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">&lt;div&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/</span>div&gt;</span><br></pre></td></tr></table></figure><p><em>注：v-model绑定的数据需要在data中提前定义好的</em></p><h5 id="B：表单中的修饰符"><a href="#B：表单中的修饰符" class="headerlink" title="B：表单中的修饰符"></a>B：表单中的修饰符</h5><p>​    （1）:  .lazy 在默认情况下， v-model 在 input 事件中同步输入框的值与数据，但你可以添加一个修饰符 lazy ，从而转变为在 change 事件中同步：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在 <span class="string">"change"</span> 而不是 <span class="string">"input"</span> 事件中更新 --&gt;</span><br><span class="line">      &lt;input v-model.lazy=<span class="string">"msg"</span> &gt;</span><br></pre></td></tr></table></figure><p>​    （2）:  .number 将用户输入的值转换为数值型，但是如果转换的为NAN即返回原值,则这个并没有啥用，还没有将type变为number有用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.number=<span class="string">"age"</span> type=<span class="string">"number"</span>&gt;</span><br></pre></td></tr></table></figure><p>​    （3）:  .trim  将=自动过滤用户输入的首尾空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input v-model.trim=<span class="string">"msg"</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="3-计算属性"><a href="#3-计算属性" class="headerlink" title="3.计算属性"></a>3.计算属性</h3><h5 id="A：定义：主要是对原数据进行改造输出，并且可以复用。改造输出：包括格式化数据（价格，日期），大小写转换，排序，添加符号"><a href="#A：定义：主要是对原数据进行改造输出，并且可以复用。改造输出：包括格式化数据（价格，日期），大小写转换，排序，添加符号" class="headerlink" title="A：定义：主要是对原数据进行改造输出，并且可以复用。改造输出：包括格式化数据（价格，日期），大小写转换，排序，添加符号"></a>A：定义：主要是对原数据进行改造输出，并且可以复用。改造输出：包括格式化数据（价格，日期），大小写转换，排序，添加符号</h5><h5 id="B：作用：computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化，例如：购物车里面的商品列表和总金额之间的关系，只要商品列表里面的商品数量发生变化，或减少或增多或删除商品，总金额都应该发生变化。"><a href="#B：作用：computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化，例如：购物车里面的商品列表和总金额之间的关系，只要商品列表里面的商品数量发生变化，或减少或增多或删除商品，总金额都应该发生变化。" class="headerlink" title="B：作用：computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化，例如：购物车里面的商品列表和总金额之间的关系，只要商品列表里面的商品数量发生变化，或减少或增多或删除商品，总金额都应该发生变化。"></a>B：作用：computed比较适合对多个变量或者对象进行处理后返回一个结果值，也就是数多个变量中的某一个值发生了变化则我们监控的这个值也就会发生变化，例如：购物车里面的商品列表和总金额之间的关系，只要商品列表里面的商品数量发生变化，或减少或增多或删除商品，总金额都应该发生变化。</h5><h5 id="C：例子："><a href="#C：例子：" class="headerlink" title="C：例子："></a>C：例子：</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;原始字符串: &#123;&#123; message &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;计算后反转字符串: &#123;&#123; reversedMessage &#125;&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    var vm = new Vue(&#123;</span></span><br><span class="line"><span class="regexp">        el: '#app',</span></span><br><span class="line"><span class="regexp">        data: &#123;</span></span><br><span class="line"><span class="regexp">            message: 'Runoob!'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        computed: &#123;</span></span><br><span class="line"><span class="regexp">            /</span><span class="regexp">/ 计算属性的 getter</span></span><br><span class="line"><span class="regexp">            reversedMessage: function () &#123;</span></span><br><span class="line"><span class="regexp">                /</span><span class="regexp">/ `this` 指向 vm 实例</span></span><br><span class="line"><span class="regexp">                return this.message.split('').reverse().join('')</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;)</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt; </span><br><span class="line"><span class="comment">//实时监听计算属性中的值是否变，如果变化，计算属性的值也会变化</span></span><br></pre></td></tr></table></figure><h3 id="4-过滤器"><a href="#4-过滤器" class="headerlink" title="4.过滤器"></a>4.过滤器</h3><h5 id="A：定义：Vue-js-允许自定义过滤器，可被用于一些常见的文本格式化，过滤器可以用在两个地方：双花括号插值和-v-bind-表达式-后者从-2-1-0-开始支持-。过滤器应该被添加在-JavaScript-表达式的尾部，由“管道”符号指示"><a href="#A：定义：Vue-js-允许自定义过滤器，可被用于一些常见的文本格式化，过滤器可以用在两个地方：双花括号插值和-v-bind-表达式-后者从-2-1-0-开始支持-。过滤器应该被添加在-JavaScript-表达式的尾部，由“管道”符号指示" class="headerlink" title="A：定义：Vue.js 允许自定义过滤器，可被用于一些常见的文本格式化，过滤器可以用在两个地方：双花括号插值和 v-bind 表达式 (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示"></a>A：定义：Vue.js 允许自定义过滤器，可被用于一些常见的文本格式化，过滤器可以用在两个地方：<strong>双花括号插值和 v-bind 表达式</strong> (后者从 2.1.0+ 开始支持)。过滤器应该被添加在 JavaScript 表达式的尾部，由“管道”符号指示</h5><h5 id="B：全局过滤器定义，在Vue实例之前定义Vue-filter-语法格式：Vue-filter-‘过滤器名称’-return-需要替换的结果"><a href="#B：全局过滤器定义，在Vue实例之前定义Vue-filter-语法格式：Vue-filter-‘过滤器名称’-return-需要替换的结果" class="headerlink" title="B：全局过滤器定义，在Vue实例之前定义Vue.filter(),语法格式：Vue.filter(‘过滤器名称’,{return 需要替换的结果})"></a>B：全局过滤器定义，在Vue实例之前定义Vue.filter(),语法格式：Vue.filter(‘过滤器名称’,{return 需要替换的结果})</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">    Vue.filter(<span class="string">'capitalize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">      value = value.toString()</span><br><span class="line">      <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>) <span class="comment">// 首字母大写</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h5 id="C：局部过滤器定义，在vue实例中使用filters-‘过滤器名称’-return-结果"><a href="#C：局部过滤器定义，在vue实例中使用filters-‘过滤器名称’-return-结果" class="headerlink" title="C：局部过滤器定义，在vue实例中使用filters(‘过滤器名称’,{return 结果})"></a>C：局部过滤器定义，在vue实例中使用filters(‘过滤器名称’,{return 结果})</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">例：</span><br><span class="line">filters: &#123;</span><br><span class="line">      capitalize: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!value) <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        value = value.toString()</span><br><span class="line">        <span class="keyword">return</span> value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="D：如何使用，语法："><a href="#D：如何使用，语法：" class="headerlink" title="D：如何使用，语法："></a>D：如何使用，语法：{{ 需要过滤的数据 | 过滤器名称 }}</h5><p>​    注意：</p><p>​        1.当全局过滤器和局部过滤器重名时，会采用局部过滤器</p><p>​         2.在使用过滤器时，如果多个过滤器，如：{{ message | filterA | filterB }} ，运行规则是A过滤message中的数据，B过滤filterA过滤完的数据</p><p>​        3.过滤器也可以接受参数，在定义过滤器时接受参数，做自己想做的操作，如:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; message | filterA(<span class="string">'arg1'</span>, arg2) &#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="5-生命周期"><a href="#5-生命周期" class="headerlink" title="5.生命周期"></a>5.生命周期</h3><p><img src="" alt=""></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">代码示例：&lt;script&gt;</span><br><span class="line">        <span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el:<span class="string">'#app'</span>,</span><br><span class="line">            data:&#123;</span><br><span class="line">                msg:<span class="string">'大家好！'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// create阶段 </span></span><br><span class="line">            <span class="comment">// 1.beforeCreate表示组件实例刚被创建，还没实例化对象之前，执行一些初始化操作</span></span><br><span class="line">            beforeCreate() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"我是beforeCreate "</span> + <span class="keyword">this</span>.msg)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.created表示组件实例创建完成，还没实例化对象之前，执行一些初始化操作，$el属性未见</span></span><br><span class="line">            created() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"我是created "</span> + <span class="keyword">this</span>.msg);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// mount阶段</span></span><br><span class="line">            <span class="comment">// 1.DOM未完成挂载，数据也初始化完成，但是数据的双向绑定还是显示&#123;&#123;&#125;&#125;，这是因为Vue采用了Virtual DOM（虚拟Dom）技术。先占住了一个坑</span></span><br><span class="line">            beforeMount() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"我是beforeMount"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 数据和DOM都完成挂载，在上一个周期占位的数据把值给渲染进去。可以在这边请求，不过created请求会更好一些。这个周期适合执行初始化需要操作DOM的方法。</span></span><br><span class="line">            mounted() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"我是mounted"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// updata阶段   ---当内部的data发生改变时触发</span></span><br><span class="line">            <span class="comment">// 1.只要是页面数据改变了都会触发，数据更新之前，页面数据还是原来的数据，当你请求赋值一个数据的时候会执行这个周期，如果没有数据改变不执行。</span></span><br><span class="line">            beforeUpdate() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"我是beforeUpdata"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 2.只要是页面数据改变了都会触发，数据更新完毕，页面的数据是更新完成的。beforeUpdate和updated要谨慎使用，因为页面更新数据的时候都会触发，在这里操作数据很影响性能和容易死循环。</span></span><br><span class="line">            updated() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"我是updated"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// destroy阶段  --- 当内部实例被销毁时触发</span></span><br><span class="line">            <span class="comment">// 在实例销毁之前调用。实例仍然完全可用</span></span><br><span class="line">            beforeDestroy() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"我是beforeDestroy"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子在服务器端渲染期间不被调用</span></span><br><span class="line">            destroyed() &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"我是Destroy"</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-组件"><a href="#6-组件" class="headerlink" title="6.组件"></a>6.组件</h3><h5 id="A：组件的定义：组件是可复用的-Vue-实例，且带有一个名字"><a href="#A：组件的定义：组件是可复用的-Vue-实例，且带有一个名字" class="headerlink" title="A：组件的定义：组件是可复用的 Vue 实例，且带有一个名字"></a>A：组件的定义：组件是可复用的 Vue 实例，且带有一个名字</h5><h5 id="B：组件名的定义：1-短横线类型-kebab-case-2-驼峰命名法-PascalCase"><a href="#B：组件名的定义：1-短横线类型-kebab-case-2-驼峰命名法-PascalCase" class="headerlink" title="B：组件名的定义：1.短横线类型(kebab-case)    2.驼峰命名法(PascalCase)"></a>B：组件名的定义：1.短横线类型(kebab-case)    2.驼峰命名法(PascalCase)</h5><h5 id="C：组件的注册：1-全局注册-2-局部注册-3-模块化中注册组件"><a href="#C：组件的注册：1-全局注册-2-局部注册-3-模块化中注册组件" class="headerlink" title="C：组件的注册：1.全局注册    2.局部注册     3.模块化中注册组件"></a>C：组件的注册：1.全局注册    2.局部注册     3.模块化中注册组件</h5><p>​    （1）全局注册：在Vue实例之前使用<code>Vue.component</code> 来创建组件，也就是说它们在注册之后可以用在任何新创建的 Vue 根实例 (<code>new Vue</code>) 的模板中 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用全局组件</span></span><br><span class="line">&lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">  &lt;component-a&gt;&lt;<span class="regexp">/component-a&gt;</span></span><br><span class="line"><span class="regexp">  &lt;component-b&gt;&lt;/</span>component-b&gt;</span><br><span class="line">  &lt;component-c&gt;&lt;<span class="regexp">/component-c&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">'component-a'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">'component-b'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line">Vue.component(<span class="string">'component-c'</span>, &#123; <span class="comment">/* ... */</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123; <span class="attr">el</span>: <span class="string">'#app'</span> &#125;)</span><br></pre></td></tr></table></figure><p>​    （2）局部注册：在Vue实例外部定义变量，在Vue内部注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ComponentA = &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ComponentB = &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="string">'component-a'</span>: ComponentA</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （3）在vue-cli脚手架中模块化局部注册组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//局部注册</span></span><br><span class="line"><span class="keyword">import</span> ComponentA <span class="keyword">from</span> <span class="string">'./ComponentA'</span></span><br><span class="line"><span class="keyword">import</span> ComponentC <span class="keyword">from</span> <span class="string">'./ComponentC'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    ComponentA,</span><br><span class="line">    ComponentC</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    （4）基础组件的自动化全局注册，可能你的许多组件只是包裹了一个输入框或按钮之类的元素，是相对通用的。我们有时候会把它们称为基础组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> BaseButton <span class="keyword">from</span> <span class="string">'./BaseButton.vue'</span></span><br><span class="line"><span class="keyword">import</span> BaseIcon <span class="keyword">from</span> <span class="string">'./BaseIcon.vue'</span></span><br><span class="line"><span class="keyword">import</span> BaseInput <span class="keyword">from</span> <span class="string">'./BaseInput.vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    BaseButton,</span><br><span class="line">    BaseIcon,</span><br><span class="line">    BaseInput</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="D：组件的通信"><a href="#D：组件的通信" class="headerlink" title="D：组件的通信"></a>D：组件的通信</h5><p>​    （1）父组件传子组件</p><p>​        方法：在父组件中动态绑定属性，属性名称和属性值都是传递数据的名称，然后在子组件中通过props接受父组件传递过来的数据，然后在子组件中就能够使用了</p><p>​    （2）子组件向父组件传值</p><p>​        方法：通过在子组件中定义方法用来触发Vue实例的$emit方法进行传递参数this.$emit(‘传递的方法名称’,传递的值)，然后再在父组件上动态绑定子组件传递过来的事件，然后再方法中接受参数，得到值 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子传父的子组件</span></span><br><span class="line"><span class="keyword">const</span> myheader = &#123;</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;我是首页部分&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input type="text" @input="myhandler" /&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">    data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            mytext:<span class="string">"大家好呀"</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        myhandler()&#123;</span><br><span class="line">            <span class="comment">// console.log(this.mytext);</span></span><br><span class="line">            <span class="keyword">this</span>.$emit(<span class="string">'getchilddata'</span>,<span class="keyword">this</span>.mytext)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父传子的子组件</span></span><br><span class="line"><span class="keyword">const</span> child = &#123;</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;</span></span><br><span class="line"><span class="string">        &lt;div&gt;我是栏目页&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &#123;&#123;datalist&#125;&#125;</span></span><br><span class="line"><span class="string">        &lt;ul&gt;</span></span><br><span class="line"><span class="string">        &lt;li v-for="data in datalist"&gt;&#123;&#123;data&#125;&#125;&lt;/li&gt;</span></span><br><span class="line"><span class="string">        &lt;/ul&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">    props:[<span class="string">'datalist'</span>],</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="keyword">const</span> parents = &#123;</span><br><span class="line">    template:<span class="string">`</span></span><br><span class="line"><span class="string">&lt;div&gt;</span></span><br><span class="line"><span class="string">&lt;myheader @getchilddata="getChilddata"&gt;&lt;/myheader&gt;</span></span><br><span class="line"><span class="string">&lt;child</span></span><br><span class="line"><span class="string">:datalist="datalist"</span></span><br><span class="line"><span class="string">&gt;</span></span><br><span class="line"><span class="string">&lt;/child&gt;</span></span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span>,</span><br><span class="line">    components:&#123;</span><br><span class="line">        myheader,</span><br><span class="line">        child,</span><br><span class="line">    &#125;,</span><br><span class="line">    data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            datalist:[</span><br><span class="line">                <span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span></span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getChilddata(mytext)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(mytext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Vue.component(<span class="string">'parents'</span>,parents);</span><br></pre></td></tr></table></figure><p>​    （3）如果组件的层级不是父子，那使用上述方法就复杂了，Vue提供了中央事件总线bus传递</p><p>​        原理：通过创建bus实例，传数据通过bus.$emit(‘方法’,传递的数据) ，取数据通过bus.$on(‘传递过来的方法’,(val)=&gt;{ 传递过来的值 })</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">代码：</span><br><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="keyword">const</span> bus = <span class="keyword">new</span> Vue()</span><br><span class="line">        <span class="keyword">const</span> br1 = &#123;</span><br><span class="line">            template:<span class="string">`</span></span><br><span class="line"><span class="string">                &lt;input type="text" v-model="mytext" @input="mybus"/&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    mytext:<span class="string">'123'</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                mybus()&#123;</span><br><span class="line">                    bus.$emit(<span class="string">'handdata'</span>,<span class="keyword">this</span>.mytext)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> br2 = &#123;</span><br><span class="line">            template:<span class="string">`</span></span><br><span class="line"><span class="string">                &lt;p&gt;br1传递过来的参数：&#123;&#123;brothmsg&#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            data:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    brothmsg:<span class="string">''</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            created()&#123;</span><br><span class="line">                bus.$on(<span class="string">'handdata'</span>,(val)=&gt;&#123;</span><br><span class="line">                    <span class="keyword">this</span>.brothmsg=val</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">        Vue.component(<span class="string">'br1'</span>,br1)</span><br><span class="line">        Vue.component(<span class="string">'br2'</span>,br2)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue的基础&quot;&gt;&lt;a href=&quot;#Vue的基础&quot; class=&quot;headerlink&quot; title=&quot;Vue的基础&quot;&gt;&lt;/a&gt;Vue的基础&lt;/h1&gt;&lt;h3 id=&quot;1-入门示例&quot;&gt;&lt;a href=&quot;#1-入门示例&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>前端文件上传方式</title>
    <link href="http://yoursite.com/2019/07/29/%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%93%8D%E4%BD%9C-%E5%89%8D%E7%AB%AF/"/>
    <id>http://yoursite.com/2019/07/29/%E5%85%B3%E4%BA%8E%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%93%8D%E4%BD%9C-%E5%89%8D%E7%AB%AF/</id>
    <published>2019-07-29T15:42:36.000Z</published>
    <updated>2020-07-12T09:37:44.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h4 id="组件库"><a href="#组件库" class="headerlink" title="组件库"></a>组件库</h4><p>如果使用的是 <code>UI</code> 组件库中已封装的上传组件，通常指明上传处理接口 <code>api</code> 即可。如 <code>ElementUI</code> 的 <code>Upload</code> 上传组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-upload</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"upload-demo"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">action</span>=<span class="string">"/api/upload"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/api/upload"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avatar"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果直接利用表单提交，则表单提交方式需要设置为 <code>post</code>，<code>enctype</code> 必须设置为 <code>multipart/form-data</code>，同时将表单 <code>&lt;form&gt;</code> 的 <code>action</code> 属性值设置为处理上传数据的后端 <code>api</code> 接口地址。</p><h4 id="FormData"><a href="#FormData" class="headerlink" title="FormData"></a>FormData</h4><p>如果不使用上传 <code>UI</code> 组件，则可使用 <code>FormData</code> 对象来处理：</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData" target="_blank" rel="noopener">FormData 文档</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"avatar"</span> <span class="attr">class</span>=<span class="string">"avatar"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="keyword">const</span> formdata = <span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="actionscript">    formdata.append(<span class="string">'username'</span>, <span class="string">'xiaoming'</span>) <span class="comment">// 或者调用 formdata.set(key, value)</span></span></span><br><span class="line"><span class="actionscript">    formdata.append(<span class="string">'sex'</span>, <span class="string">'male'</span>)</span></span><br><span class="line"><span class="javascript">    formdata.append(<span class="string">'avatar'</span>, <span class="built_in">document</span>.querySelector(<span class="string">'.avatar'</span>).files[<span class="number">0</span>])</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先创建 <code>FormData</code> 对象，将需要提交的文本数据、图像数据（二进制流数据）等调用 <code>append()</code>、<code>set()</code> 方法添加到 <code>FormData</code> 对象中，再利用 <code>ajax</code> 异步（可结合 <code>Promise</code>）提交保存到服务器：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ajax(&#123;</span><br><span class="line">    url,</span><br><span class="line">    type: <span class="string">'post'</span>, <span class="comment">// 必须为 'post' 或 'put'/'patch' 提交方式</span></span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span> <span class="comment">// 上传文件时内容类型必须为 'multipart/form-data'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    data: formdata</span><br><span class="line">&#125;)</span><br><span class="line">  .then(onFulfilled) <span class="comment">// 成功的回调处理</span></span><br><span class="line">  .catch(onRejected) <span class="comment">// 失败的回调处理</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文件上传&quot;&gt;&lt;a href=&quot;#文件上传&quot; class=&quot;headerlink&quot; title=&quot;文件上传&quot;&gt;&lt;/a&gt;文件上传&lt;/h2&gt;&lt;h3 id=&quot;前端&quot;&gt;&lt;a href=&quot;#前端&quot; class=&quot;headerlink&quot; title=&quot;前端&quot;&gt;&lt;/a&gt;前端&lt;/h
      
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScriot</title>
    <link href="http://yoursite.com/2019/07/29/%E7%94%A8%E6%88%B7token%E9%AA%8C%E8%AF%81%E6%9D%83%E9%99%90/"/>
    <id>http://yoursite.com/2019/07/29/%E7%94%A8%E6%88%B7token%E9%AA%8C%E8%AF%81%E6%9D%83%E9%99%90/</id>
    <published>2019-07-29T13:47:06.000Z</published>
    <updated>2020-07-12T09:39:11.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端登录访问页面验证token权限具体步骤"><a href="#前端登录访问页面验证token权限具体步骤" class="headerlink" title="前端登录访问页面验证token权限具体步骤"></a>前端登录访问页面验证token权限具体步骤</h2><p>1、第一次登录的时候，前端调后端的登陆接口，发送用户名和密码</p><p>2、后端收到请求，验证用户名和密码，验证成功，就给前端返回一个token</p><p>3、前端拿到token，将token存储到localStorage和vuex中，并跳转路由页面</p><p>4、前端每次跳转路由，就判断 localStroage 中有无 token ，没有就跳转到登录页面，有则跳转到对应路由页面</p><p>5、每次调后端接口，都要在请求头中加token</p><p>6、后端判断请求头中有无token，有token，就拿到token并验证token，验证成功就返回数据，验证失败（例如：token过期）就返回401，请求头中没有token也返回401</p><p>7、如果前端拿到状态码为401，就清除token信息并跳转到登录页面</p><p><strong>详情请见：<a href="https://www.cnblogs.com/xuzhenlei/p/12427122.html" target="_blank" rel="noopener">https://www.cnblogs.com/xuzhenlei/p/12427122.html</a></strong> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端登录访问页面验证token权限具体步骤&quot;&gt;&lt;a href=&quot;#前端登录访问页面验证token权限具体步骤&quot; class=&quot;headerlink&quot; title=&quot;前端登录访问页面验证token权限具体步骤&quot;&gt;&lt;/a&gt;前端登录访问页面验证token权限具体步骤&lt;/
      
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Javascript" scheme="http://yoursite.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Webpack入门</title>
    <link href="http://yoursite.com/2019/03/21/webpack/"/>
    <id>http://yoursite.com/2019/03/21/webpack/</id>
    <published>2019-03-21T14:15:43.000Z</published>
    <updated>2020-07-12T09:37:25.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Webpack笔记"><a href="#Webpack笔记" class="headerlink" title="Webpack笔记"></a>Webpack笔记</h2><h4 id="在使用webpack之前，通过"><a href="#在使用webpack之前，通过" class="headerlink" title="在使用webpack之前，通过"></a>在使用webpack之前，通过</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init -y <span class="comment">//初始化文件夹内容并创建package.json文件</span></span><br><span class="line"><span class="comment">// 安装Webpack</span></span><br><span class="line">npm install --save-dev webpack</span><br></pre></td></tr></table></figure><h4 id="1-入口-entry"><a href="#1-入口-entry" class="headerlink" title="1.入口(entry)"></a>1.入口(entry)</h4><p><strong>入口起点(entry point)</strong>指示 webpack 应该使用哪个模块，来作为构建其内部<em>依赖图</em>的开始,首先在根目录下创建一个<code>webpack.config.js</code>文件 ，用书写整个webpack工程的配置代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//入口文件为平级的main.js</span></span><br><span class="line">  <span class="comment">//单入口</span></span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  <span class="comment">//多入口</span></span><br><span class="line">  <span class="comment">//多入口</span></span><br><span class="line">  entry: &#123;</span><br><span class="line">    one: <span class="string">'./src/one/index.js'</span>,</span><br><span class="line">    two: <span class="string">'./src/two/index.js'</span>,</span><br><span class="line">    three: <span class="string">'./src/three/index.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="2-出口-output"><a href="#2-出口-output" class="headerlink" title="2.出口(output)"></a>2.出口(output)</h4><p><strong>output</strong> 属性告诉 webpack 在哪里输出它所创建的 <em>bundles</em>，以及如何命名这些文件，默认值为 <code>./dist</code> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引用node.js的内置模块</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">//path.resolve()方法可以将路径或者路径片段解析成绝对路径</span></span><br><span class="line">    <span class="comment">//__dirname代表的是当前文件（a.js）的绝对路径</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">    filename: <span class="string">'my-first-webpack.bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-loader"><a href="#3-loader" class="headerlink" title="3.loader"></a>3.loader</h4><p><strong>loader</strong> 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）。loader 可以将所有类型的文件转换为 webpack 能够处理的有效<a href="https://www.webpackjs.com/concepts/modules" target="_blank" rel="noopener">模块</a>，然后你就可以利用 webpack 的打包能力，对它们进行处理 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    <span class="comment">//rule</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// test 属性，用于标识出应该被对应的 loader 进行转换的某个或某些文件。</span></span><br><span class="line">  <span class="comment">// use 属性，表示进行转换时，应该使用哪个 loader。</span></span><br><span class="line">      test: <span class="regexp">/\.css$/</span>, </span><br><span class="line">      use: [</span><br><span class="line">      <span class="comment">//loader——工作顺序：尾至头</span></span><br><span class="line">        &#123; <span class="attr">loader</span>: <span class="string">'style-loader'</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          loader: <span class="string">'css-loader'</span>,</span><br><span class="line">          options: &#123;</span><br><span class="line">            modules: <span class="literal">true</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//加载css</span></span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'style-loader'</span>,</span><br><span class="line">        <span class="string">'css-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//加载图像</span></span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">      use: [</span><br><span class="line">        <span class="string">'file-loader'</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-插件-plugins"><a href="#4-插件-plugins" class="headerlink" title="4.插件(plugins)"></a>4.插件(plugins)</h4><p>插件（Plugins）是用来拓展Webpack功能的，它们会在整个构建过程中生效，执行相关的任务</p><p>使用插件的方法<br>要使用某个插件，我们需要通过npm安装它，然后要做的就是在webpack配置中的plugins关键字部分添加该插件的一个实例（plugins是一个数组）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">'版权所有，翻版必究'</span>)</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="5-如何使用webpack"><a href="#5-如何使用webpack" class="headerlink" title="5.如何使用webpack"></a>5.如何使用webpack</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//package.js中的配置</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpack-sample-project"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"Sample webpack project"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span> <span class="comment">// 修改的是这里，JSON文件不支持注释，引用时请清除</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">"zhang"</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"3.10.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//命令行中使用简单的npm start</span></span><br></pre></td></tr></table></figure><p>注：像vue-cli这些都不需要webPack打包，内部有自动打包工具</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Webpack笔记&quot;&gt;&lt;a href=&quot;#Webpack笔记&quot; class=&quot;headerlink&quot; title=&quot;Webpack笔记&quot;&gt;&lt;/a&gt;Webpack笔记&lt;/h2&gt;&lt;h4 id=&quot;在使用webpack之前，通过&quot;&gt;&lt;a href=&quot;#在使用webpack
      
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="Webpack" scheme="http://yoursite.com/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>我的Javascript规范</title>
    <link href="http://yoursite.com/2018/09/25/%E6%88%91%E7%9A%84javascript%E8%A7%84%E8%8C%83/"/>
    <id>http://yoursite.com/2018/09/25/%E6%88%91%E7%9A%84javascript%E8%A7%84%E8%8C%83/</id>
    <published>2018-09-25T14:58:09.000Z</published>
    <updated>2020-07-12T09:37:40.246Z</updated>
    
    <content type="html"><![CDATA[<h1 id="me-JavaScript规范"><a href="#me-JavaScript规范" class="headerlink" title="me JavaScript规范"></a>me JavaScript规范</h1><h2 id="1-代码规范"><a href="#1-代码规范" class="headerlink" title="1.代码规范"></a>1.代码规范</h2><h4 id="1-1-结构"><a href="#1-1-结构" class="headerlink" title="1.1  结构"></a>1.1  结构</h4><h5 id="1-1-12-2-1-缩进"><a href="#1-1-12-2-1-缩进" class="headerlink" title="1.1.12.2.1 缩进"></a>1.1.12.2.1 缩进</h5><h4 id="2-2-1-缩进"><a href="#2-2-1-缩进" class="headerlink" title="2.2.1 缩进"></a>2.2.1 缩进</h4><h5 id="强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。"><a href="#强制-使用-4-个空格做为一个缩进层级，不允许使用-2-个空格-或-tab-字符。" class="headerlink" title="[强制] 使用 4 个空格做为一个缩进层级，不允许使用 2 个空格 或 tab 字符。"></a>[强制] 使用 <code>4</code> 个空格做为一个缩进层级，不允许使用 <code>2</code> 个空格 或 <code>tab</code> 字符。</h5><h5 id="强制-switch-下的-case-和-default-必须增加一个缩进层级。"><a href="#强制-switch-下的-case-和-default-必须增加一个缩进层级。" class="headerlink" title="[强制] switch 下的 case 和 default 必须增加一个缩进层级。"></a>[强制] <code>switch</code> 下的 <code>case</code> 和 <code>default</code> 必须增加一个缩进层级。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="comment">// do...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">switch</span> (variable) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="comment">// do...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-2-空格"><a href="#2-2-2-空格" class="headerlink" title="2.2.2 空格"></a>2.2.2 空格</h4><h5 id="强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。"><a href="#强制-二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。" class="headerlink" title="[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。"></a>[强制] 二元运算符两侧必须有一个空格，一元运算符与操作对象之间不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = !arr.length;</span><br><span class="line">a++;</span><br><span class="line">a = b + c;</span><br></pre></td></tr></table></figure><h5 id="强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。"><a href="#强制-函数声明、具名函数表达式、函数调用中，函数名和-之间不允许有空格。" class="headerlink" title="[强制] 函数声明、具名函数表达式、函数调用中，函数名和 ( 之间不允许有空格。"></a>[强制] 函数声明、具名函数表达式、函数调用中，函数名和 <code>(</code> 之间不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcName();</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> <span class="title">funcName</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">funcName ();</span><br></pre></td></tr></table></figure><h5 id="强制-和-前不允许有空格。如果不位于行尾，-和-后必须跟一个空格。"><a href="#强制-和-前不允许有空格。如果不位于行尾，-和-后必须跟一个空格。" class="headerlink" title="[强制] , 和 ; 前不允许有空格。如果不位于行尾，, 和 ; 后必须跟一个空格。"></a>[强制] <code>,</code> 和 <code>;</code> 前不允许有空格。如果不位于行尾，<code>,</code> 和 <code>;</code> 后必须跟一个空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">callFunc(a, b);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">callFunc(a , b) ;</span><br></pre></td></tr></table></figure><h5 id="强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。"><a href="#强制-在函数调用、函数声明、括号表达式、属性访问、if-for-while-switch-catch-等语句中，-和-内紧贴括号部分不允许有空格。" class="headerlink" title="[强制] 在函数调用、函数声明、括号表达式、属性访问、if / for / while / switch / catch 等语句中，() 和 [] 内紧贴括号部分不允许有空格。"></a>[强制] 在函数调用、函数声明、括号表达式、属性访问、<code>if / for / while / switch / catch</code> 等语句中，<code>()</code> 和 <code>[]</code> 内紧贴括号部分不允许有空格。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"></span><br><span class="line">callFunc(param1, param2, param3);</span><br><span class="line"></span><br><span class="line">save(<span class="keyword">this</span>.list[<span class="keyword">this</span>.indexes[i]]);</span><br><span class="line"></span><br><span class="line">needIncream &amp;&amp; (variable += increament);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (num &gt; list.length) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"></span><br><span class="line">callFunc( param1, param2, param3 );</span><br><span class="line"></span><br><span class="line">save( <span class="keyword">this</span>.list[ <span class="keyword">this</span>.indexes[ i ] ] );</span><br><span class="line"></span><br><span class="line">needIncreament &amp;&amp; ( variable += increament );</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( num &gt; list.length ) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ( len-- ) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。"><a href="#强制-单行声明的数组与对象，如果包含元素，-和-内紧贴括号部分不允许包含空格。" class="headerlink" title="[强制] 单行声明的数组与对象，如果包含元素，{} 和 [] 内紧贴括号部分不允许包含空格。"></a>[强制] 单行声明的数组与对象，如果包含元素，<code>{}</code> 和 <code>[]</code> 内紧贴括号部分不允许包含空格。</h5><p>解释：</p><p>声明包含元素的数组与对象，只有当内部元素的形式较为简单时，才允许写在一行。元素复杂的情况，还是应该换行书写。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    name: <span class="string">'obj'</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [ ];</span><br><span class="line"><span class="keyword">var</span> arr2 = [ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ];</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123; &#125;;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">'obj'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;<span class="attr">name</span>: <span class="string">'obj'</span>, <span class="attr">age</span>: <span class="number">20</span>, <span class="attr">sex</span>: <span class="number">1</span>&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-行尾不得有多余的空格。"><a href="#强制-行尾不得有多余的空格。" class="headerlink" title="[强制] 行尾不得有多余的空格。"></a>[强制] 行尾不得有多余的空格。</h5><h4 id="2-2-3-换行"><a href="#2-2-3-换行" class="headerlink" title="2.2.3 换行"></a>2.2.3 换行</h4><h5 id="强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for-语句等场景中，不允许在-或-前换行。"><a href="#强制-在函数声明、函数表达式、函数调用、对象创建、数组创建、for-语句等场景中，不允许在-或-前换行。" class="headerlink" title="[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、for 语句等场景中，不允许在 , 或 ; 前换行。"></a>[强制] 在函数声明、函数表达式、函数调用、对象创建、数组创建、<code>for</code> 语句等场景中，不允许在 <code>,</code> 或 <code>;</code> 前换行。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="number">2</span>,</span><br><span class="line">    c: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument,</span><br><span class="line">    anotherVeryLongArgument,</span><br><span class="line">    callback</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">    , <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">    , <span class="attr">c</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">foo(</span><br><span class="line">    aVeryVeryLongArgument</span><br><span class="line">    , anotherVeryLongArgument</span><br><span class="line">    , callback</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。"><a href="#建议-不同行为或逻辑的语句集，使用空行隔开，更易阅读。" class="headerlink" title="[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。"></a>[建议] 不同行为或逻辑的语句集，使用空行隔开，更易阅读。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 仅为按逻辑换行的示例，不代表setStyle的最优实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setStyle</span>(<span class="params">element , property , value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    element.style[property] = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-4-语句"><a href="#2-2-4-语句" class="headerlink" title="2.2.4 语句"></a>2.2.4 语句</h4><h5 id="强制-不得省略语句结束的分号。"><a href="#强制-不得省略语句结束的分号。" class="headerlink" title="[强制] 不得省略语句结束的分号。"></a>[强制] 不得省略语句结束的分号。</h5><h5 id="强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。"><a href="#强制-在-if-else-for-do-while-语句中，即使只有一行，也不得省略块-。" class="headerlink" title="[强制] 在 if / else / for / do / while 语句中，即使只有一行，也不得省略块 {...}。"></a>[强制] 在 <code>if / else / for / do / while</code> 语句中，即使只有一行，也不得省略块 <code>{...}</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (condition) &#123;</span><br><span class="line">    callFunc();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (condition) callFunc();</span><br><span class="line"><span class="keyword">if</span> (condition)</span><br><span class="line">    callFunc();</span><br></pre></td></tr></table></figure><h5 id="强制-函数定义结束不允许添加分号。"><a href="#强制-函数定义结束不允许添加分号。" class="headerlink" title="[强制] 函数定义结束不允许添加分号。"></a>[强制] 函数定义结束不允许添加分号。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">funcName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果是函数表达式，分号是不允许省略的。</span></span><br><span class="line"><span class="keyword">var</span> funcName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-命名"><a href="#2-3-命名" class="headerlink" title="2.3 命名"></a>2.3 命名</h3><h5 id="强制-变量-使用-Camel命名法。"><a href="#强制-变量-使用-Camel命名法。" class="headerlink" title="[强制] 变量 使用 Camel命名法。"></a>[强制] <code>变量</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingModules = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-函数-使用-Camel命名法。"><a href="#强制-函数-使用-Camel命名法。" class="headerlink" title="[强制] 函数 使用 Camel命名法。"></a>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringFormat</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-函数的-参数-使用-Camel命名法。"><a href="#强制-函数的-参数-使用-Camel命名法。" class="headerlink" title="[强制] 函数的 参数 使用 Camel命名法。"></a>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hear</span>(<span class="params">theBells</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-类-使用-Pascal命名法。"><a href="#强制-类-使用-Pascal命名法。" class="headerlink" title="[强制] 类 使用 Pascal命名法。"></a>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-类的-方法-属性-使用-Camel命名法。"><a href="#强制-类的-方法-属性-使用-Camel命名法。" class="headerlink" title="[强制] 类的 方法 / 属性 使用 Camel命名法。"></a>[强制] 类的 <code>方法</code> / <code>属性</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a>[强制] <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TargetState = &#123;</span><br><span class="line">    READING: <span class="number">1</span>,</span><br><span class="line">    READED: <span class="number">2</span>,</span><br><span class="line">    APPLIED: <span class="number">3</span>,</span><br><span class="line">    READY: <span class="number">4</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-命名空间-使用-Camel命名法。"><a href="#强制-命名空间-使用-Camel命名法。" class="headerlink" title="[强制] 命名空间 使用 Camel命名法。"></a>[强制] <code>命名空间</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">equipments.heavyWeapons = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"><a href="#强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。" class="headerlink" title="[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"></a>[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XMLParser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertHTML</span>(<span class="params">element, html</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> HTTPRequest();</span><br></pre></td></tr></table></figure><h5 id="强制-类名-使用-名词。"><a href="#强制-类名-使用-名词。" class="headerlink" title="[强制] 类名 使用 名词。"></a>[强制] <code>类名</code> 使用 <code>名词</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engine</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-函数名-使用-动宾短语。"><a href="#建议-函数名-使用-动宾短语。" class="headerlink" title="[建议] 函数名 使用 动宾短语。"></a>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-boolean-类型的变量使用-is-或-has-开头。"><a href="#建议-boolean-类型的变量使用-is-或-has-开头。" class="headerlink" title="[建议] boolean 类型的变量使用 is 或 has 开头。"></a>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isReady = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> hasMoreCommands = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-Promise对象-用-动宾短语的进行时-表达。"><a href="#建议-Promise对象-用-动宾短语的进行时-表达。" class="headerlink" title="[建议] Promise对象 用 动宾短语的进行时 表达。"></a>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingData = ajax.get(<span class="string">'url'</span>);</span><br><span class="line">loadingData.then(callback);</span><br></pre></td></tr></table></figure><h3 id="2-4-注释"><a href="#2-4-注释" class="headerlink" title="2.4 注释"></a>2.4 注释</h3><h4 id="2-4-1-单行注释"><a href="#2-4-1-单行注释" class="headerlink" title="2.4.1 单行注释"></a>2.4.1 单行注释</h4><h5 id="强制-与需要注释的文本在同一行。"><a href="#强制-与需要注释的文本在同一行。" class="headerlink" title="[强制] 与需要注释的文本在同一行。"></a>[强制] 与需要注释的文本在同一行。</h5><h4 id="2-4-2-多行注释"><a href="#2-4-2-多行注释" class="headerlink" title="2.4.2 多行注释"></a>2.4.2 多行注释</h4><h5 id="建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。"><a href="#建议-避免使用-这样的多行注释。有多行注释内容时，使用多个单行注释。" class="headerlink" title="[建议] 避免使用 /*...*/ 这样的多行注释。有多行注释内容时，使用多个单行注释。"></a>[建议] 避免使用 <code>/*...*/</code> 这样的多行注释。有多行注释内容时，使用多个单行注释。</h5><h4 id="2-4-3-文档化注释"><a href="#2-4-3-文档化注释" class="headerlink" title="2.4.3 文档化注释"></a>2.4.3 文档化注释</h4><h5 id="强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。"><a href="#强制-为了便于代码阅读和自文档化，以下内容必须包含以-形式的块注释中。" class="headerlink" title="[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 /**...*/ 形式的块注释中。"></a>[强制] 为了便于代码阅读和自文档化，以下内容必须包含以 <code>/**...*/</code> 形式的块注释中。</h5><p>解释：</p><ol><li>文件</li><li>namespace</li><li>类</li><li>函数或方法</li><li>类属性</li><li>事件</li><li>全局变量</li><li>常量</li><li>AMD 模块</li></ol><h5 id="强制-文档注释前必须空一行。"><a href="#强制-文档注释前必须空一行。" class="headerlink" title="[强制] 文档注释前必须空一行。"></a>[强制] 文档注释前必须空一行。</h5><h5 id="建议-自文档化的文档说明-what，而不是-how。"><a href="#建议-自文档化的文档说明-what，而不是-how。" class="headerlink" title="[建议] 自文档化的文档说明 what，而不是 how。"></a>[建议] 自文档化的文档说明 what，而不是 how。</h5><h4 id="2-4-4-类型定义"><a href="#2-4-4-类型定义" class="headerlink" title="2.4.4 类型定义"></a>2.4.4 类型定义</h4><h5 id="强制-类型定义都是以-开始-以-结束。"><a href="#强制-类型定义都是以-开始-以-结束。" class="headerlink" title="[强制] 类型定义都是以 { 开始, 以 } 结束。"></a>[强制] 类型定义都是以 <code>{</code> 开始, 以 <code>}</code> 结束。</h5><p>解释：</p><p>常用类型如：{string}, {number}, {boolean}, {Object}, {Function}, {RegExp}, {Array}, {Date}。</p><p>类型不仅局限于内置的类型，也可以是自定义的类型。比如定义了一个类 Developer，就可以使用它来定义一个参数和返回值的类型。</p><h5 id="强制-对于基本类型-string-number-boolean-，首字母必须小写。"><a href="#强制-对于基本类型-string-number-boolean-，首字母必须小写。" class="headerlink" title="[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。"></a>[强制] 对于基本类型 {string}, {number}, {boolean}，首字母必须小写。</h5><table><thead><tr><th>类型定义</th><th>语法示例</th><th>解释</th></tr></thead><tbody><tr><td>String</td><td>{string}</td><td>–</td></tr><tr><td>Number</td><td>{number}</td><td>–</td></tr><tr><td>Boolean</td><td>{boolean}</td><td>–</td></tr><tr><td>Object</td><td>{Object}</td><td>–</td></tr><tr><td>Function</td><td>{Function}</td><td>–</td></tr><tr><td>RegExp</td><td>{RegExp}</td><td>–</td></tr><tr><td>Array</td><td>{Array}</td><td>–</td></tr><tr><td>Date</td><td>{Date}</td><td>–</td></tr><tr><td>单一类型集合</td><td>{Array.&lt;string&gt;}</td><td>string 类型的数组</td></tr><tr><td>多类型</td><td>{(number｜boolean)}</td><td>可能是 number 类型, 也可能是 boolean 类型</td></tr><tr><td>允许为null</td><td>{?number}</td><td>可能是 number, 也可能是 null</td></tr><tr><td>不允许为null</td><td>{!Object}</td><td>Object 类型, 但不是 null</td></tr><tr><td>Function类型</td><td>{function(number, boolean)}</td><td>函数, 形参类型</td></tr><tr><td>Function带返回值</td><td>{function(number, boolean):string}</td><td>函数, 形参, 返回值类型</td></tr><tr><td>Promise</td><td>Promise.&lt;resolveType, rejectType&gt;</td><td>Promise，成功返回的数据类型，失败返回的错误类型</td></tr><tr><td>参数可选</td><td>@param {string=} name</td><td>可选参数, =为类型后缀</td></tr><tr><td>可变参数</td><td>@param {…number} args</td><td>变长参数,  …为类型前缀</td></tr><tr><td>任意类型</td><td>{*}</td><td>任意类型</td></tr><tr><td>可选任意类型</td><td>@param {*=} name</td><td>可选参数，类型不限</td></tr><tr><td>可变任意类型</td><td>@param {…*} args</td><td>变长参数，类型不限</td></tr></tbody></table><h4 id="2-4-13-细节注释"><a href="#2-4-13-细节注释" class="headerlink" title="2.4.13 细节注释"></a>2.4.13 细节注释</h4><p>对于内部实现、不容易理解的逻辑说明、摘要信息等，我们可能需要编写细节注释。</p><h4 id="建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。"><a href="#建议-细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。" class="headerlink" title="[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。"></a>[建议] 细节注释遵循单行注释的格式。说明必须换行时，每行是一个单行注释的起始。</h4><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">p1, p2, opt_p3</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里对具体内部逻辑进行说明</span></span><br><span class="line">    <span class="comment">// 说明太长需要换行</span></span><br><span class="line">    <span class="keyword">for</span> (...) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记："><a href="#强制-有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：" class="headerlink" title="[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记："></a>[强制] 有时我们会使用一些特殊标记进行说明。特殊标记必须使用单行注释的形式。下面列举了一些常用标记：</h5><p>解释：</p><ol><li>TODO: 有功能待实现。此时需要对将要实现的功能进行简单说明。</li><li>FIXME: 该处代码运行没问题，但可能由于时间赶或者其他原因，需要修正。此时需要对如何修正进行简单说明。</li><li>HACK: 为修正某些问题而写的不太好或者使用了某些诡异手段的代码。此时需要对思路或诡异手段进行描述。</li><li>XXX: 该处存在陷阱。此时需要对陷阱进行描述。</li></ol><h2 id="3-语言特性"><a href="#3-语言特性" class="headerlink" title="3 语言特性"></a>3 语言特性</h2><h3 id="3-1-变量"><a href="#3-1-变量" class="headerlink" title="3.1 变量"></a>3.1 变量</h3><h5 id="强制-变量、函数在使用前必须先定义。"><a href="#强制-变量、函数在使用前必须先定义。" class="headerlink" title="[强制] 变量、函数在使用前必须先定义。"></a>[强制] 变量、函数在使用前必须先定义。</h5><p>解释：</p><p>不通过 var 定义变量将导致变量污染全局环境。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'MyName'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line">name = <span class="string">'MyName'</span>;</span><br></pre></td></tr></table></figure><p>原则上不建议使用全局变量，对于已有的全局变量或第三方框架引入的全局变量，需要根据检查工具的语法标识。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* globals jQuery */</span></span><br><span class="line"><span class="keyword">var</span> element = jQuery(<span class="string">'#element-id'</span>);</span><br></pre></td></tr></table></figure><h5 id="强制-每个-var-只能声明一个变量。"><a href="#强制-每个-var-只能声明一个变量。" class="headerlink" title="[强制] 每个 var 只能声明一个变量。"></a>[强制] 每个 <code>var</code> 只能声明一个变量。</h5><p>解释：</p><p>一个 <code>var</code> 声明多个变量，容易导致较长的行长度，并且在修改时容易造成逗号和分号的混淆。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [];</span><br><span class="line"><span class="keyword">var</span> missModules = [];</span><br><span class="line"><span class="keyword">var</span> visited = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> hangModules = [],</span><br><span class="line">    missModules = [],</span><br><span class="line">    visited = &#123;&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。"><a href="#强制-变量必须-即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。" class="headerlink" title="[强制] 变量必须 即用即声明，不得在函数或其它形式的代码块起始位置统一声明所有变量。"></a>[强制] 变量必须 <code>即用即声明</code>，不得在函数或其它形式的代码块起始位置统一声明所有变量。</h5><p>解释：</p><p>变量声明与使用的距离越远，出现的跨度越大，代码的阅读与维护成本越高。虽然JavaScript的变量是函数作用域，还是应该根据编程中的意图，缩小变量出现的距离空间。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">            <span class="keyword">var</span> item = &#123;</span><br><span class="line">                k: key,</span><br><span class="line">                v: source[key]</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            list.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">kv2List</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> list = [];</span><br><span class="line">    <span class="keyword">var</span> key;</span><br><span class="line">    <span class="keyword">var</span> item;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (key <span class="keyword">in</span> source) &#123;</span><br><span class="line">        <span class="keyword">if</span> (source.hasOwnProperty(key)) &#123;</span><br><span class="line">            item = &#123;</span><br><span class="line">                k: key,</span><br><span class="line">                v: source[key]</span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            list.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-条件"><a href="#3-2-条件" class="headerlink" title="3.2 条件"></a>3.2 条件</h3><h5 id="强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。"><a href="#强制-在-Equality-Expression-中使用类型严格的-。仅当判断-null-或-undefined-时，允许使用-null。" class="headerlink" title="[强制] 在 Equality Expression 中使用类型严格的 ===。仅当判断 null 或 undefined 时，允许使用 == null。"></a>[强制] 在 Equality Expression 中使用类型严格的 <code>===</code>。仅当判断 <code>null</code> 或 <code>undefined</code> 时，允许使用 <code>== null</code>。</h5><p>解释：</p><p>使用 <code>===</code> 可以避免等于判断中隐式的类型转换。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (age === <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (age == <span class="number">30</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-尽可能使用简洁的表达式。"><a href="#建议-尽可能使用简洁的表达式。" class="headerlink" title="[建议] 尽可能使用简洁的表达式。"></a>[建议] 尽可能使用简洁的表达式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!name) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name === <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (name) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (name !== <span class="string">''</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组非空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (collection.length) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (collection.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 布尔不成立</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (!notTrue) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (notTrue === <span class="literal">false</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// null 或 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">if</span> (noValue == <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">if</span> (noValue === <span class="literal">null</span> || <span class="keyword">typeof</span> noValue === <span class="string">'undefined'</span>) &#123;</span><br><span class="line">  <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-按执行频率排列分支的顺序。"><a href="#建议-按执行频率排列分支的顺序。" class="headerlink" title="[建议] 按执行频率排列分支的顺序。"></a>[建议] 按执行频率排列分支的顺序。</h5><p>解释：</p><p>按执行频率排列分支的顺序好处是：</p><ol><li>阅读的人容易找到最常见的情况，增加可读性。</li><li>提高执行效率。</li></ol><h5 id="建议-对于相同变量或表达式的多值条件，用-switch-代替-if。"><a href="#建议-对于相同变量或表达式的多值条件，用-switch-代替-if。" class="headerlink" title="[建议] 对于相同变量或表达式的多值条件，用 switch 代替 if。"></a>[建议] 对于相同变量或表达式的多值条件，用 <code>switch</code> 代替 <code>if</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="keyword">typeof</span> variable) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'object'</span>:</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'boolean'</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'string'</span>:</span><br><span class="line">        <span class="comment">// ......</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> type = <span class="keyword">typeof</span> variable;</span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">'number'</span> || type === <span class="string">'boolean'</span> || type === <span class="string">'string'</span>) &#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。"><a href="#建议-如果函数或全局中的-else-块后没有任何语句，可以删除-else。" class="headerlink" title="[建议] 如果函数或全局中的 else 块后没有任何语句，可以删除 else。"></a>[建议] 如果函数或全局中的 <code>else</code> 块后没有任何语句，可以删除 <code>else</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'unnamed'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (name) &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'unnamed'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-循环"><a href="#3-3-循环" class="headerlink" title="3.3 循环"></a>3.3 循环</h3><h5 id="建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。"><a href="#建议-不要在循环体中包含函数表达式，事先将函数提取到循环体外。" class="headerlink" title="[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。"></a>[建议] 不要在循环体中包含函数表达式，事先将函数提取到循环体外。</h5><p>解释：</p><p>循环体中的函数表达式，运行过程中会生成循环次数个函数对象。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicker</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    addListener(element, <span class="string">'click'</span>, clicker);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    addListener(element, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对循环内多次使用的不变值，在循环外用变量缓存。"><a href="#建议-对循环内多次使用的不变值，在循环外用变量缓存。" class="headerlink" title="[建议] 对循环内多次使用的不变值，在循环外用变量缓存。"></a>[建议] 对循环内多次使用的不变值，在循环外用变量缓存。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> width = wrap.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    element.style.width = width;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    element.style.width = wrap.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对有序集合进行遍历时，缓存-length。"><a href="#建议-对有序集合进行遍历时，缓存-length。" class="headerlink" title="[建议] 对有序集合进行遍历时，缓存 length。"></a>[建议] 对有序集合进行遍历时，缓存 <code>length</code>。</h5><p>解释：</p><p>虽然现代浏览器都对数组长度进行了缓存，但对于一些宿主对象和老旧浏览器的数组对象，在每次 <code>length</code> 访问时会动态计算元素个数，此时缓存 <code>length</code> 能有效提高程序性能。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = elements.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[i];</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。"><a href="#建议-对有序集合进行顺序无关的遍历时，使用逆序遍历。" class="headerlink" title="[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。"></a>[建议] 对有序集合进行顺序无关的遍历时，使用逆序遍历。</h5><p>解释：</p><p>逆序遍历可以节省变量，代码比较优化。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> len = elements.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = elements[len];</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-类型"><a href="#3-4-类型" class="headerlink" title="3.4 类型"></a>3.4 类型</h3><h4 id="3-4-1-类型检测"><a href="#3-4-1-类型检测" class="headerlink" title="3.4.1 类型检测"></a>3.4.1 类型检测</h4><h5 id="建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。"><a href="#建议-类型检测优先使用-typeof。对象类型检测使用-instanceof。null-或-undefined-的检测使用-null。" class="headerlink" title="[建议] 类型检测优先使用 typeof。对象类型检测使用 instanceof。null 或 undefined 的检测使用 == null。"></a>[建议] 类型检测优先使用 <code>typeof</code>。对象类型检测使用 <code>instanceof</code>。<code>null</code> 或 <code>undefined</code> 的检测使用 <code>== null</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'string'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// number</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'number'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// boolean</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'boolean'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Function</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'function'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'object'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// RegExp</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">RegExp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Array</span></span><br><span class="line">variable <span class="keyword">instanceof</span> <span class="built_in">Array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null</span></span><br><span class="line">variable === <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// null or undefined</span></span><br><span class="line">variable == <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">typeof</span> variable === <span class="string">'undefined'</span></span><br></pre></td></tr></table></figure><h4 id="3-4-2-类型转换"><a href="#3-4-2-类型转换" class="headerlink" title="3.4.2 类型转换"></a>3.4.2 类型转换</h4><h5 id="建议-转换成-string-时，使用-39-39-。"><a href="#建议-转换成-string-时，使用-39-39-。" class="headerlink" title="[建议] 转换成 string 时，使用 + &#39;&#39;。"></a>[建议] 转换成 <code>string</code> 时，使用 <code>+ &#39;&#39;</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">num + <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(num);</span><br><span class="line">num.toString();</span><br><span class="line"><span class="built_in">String</span>(num);</span><br></pre></td></tr></table></figure><h5 id="建议-转换成-number-时，通常使用-。"><a href="#建议-转换成-number-时，通常使用-。" class="headerlink" title="[建议] 转换成 number 时，通常使用 +。"></a>[建议] 转换成 <code>number</code> 时，通常使用 <code>+</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line">+str;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">Number</span>(str);</span><br></pre></td></tr></table></figure><h5 id="建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。"><a href="#建议-string-转换成-number，要转换的字符串结尾包含非数字并期望忽略时，使用-parseInt。" class="headerlink" title="[建议] string 转换成 number，要转换的字符串结尾包含非数字并期望忽略时，使用 parseInt。"></a>[建议] <code>string</code> 转换成 <code>number</code>，要转换的字符串结尾包含非数字并期望忽略时，使用 <code>parseInt</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width = <span class="string">'200px'</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(width, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h5 id="强制-使用-parseInt-时，必须指定进制。"><a href="#强制-使用-parseInt-时，必须指定进制。" class="headerlink" title="[强制] 使用 parseInt 时，必须指定进制。"></a>[强制] 使用 <code>parseInt</code> 时，必须指定进制。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="built_in">parseInt</span>(str, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="built_in">parseInt</span>(str);</span><br></pre></td></tr></table></figure><h5 id="建议-转换成-boolean-时，使用-。"><a href="#建议-转换成-boolean-时，使用-。" class="headerlink" title="[建议] 转换成 boolean 时，使用 !!。"></a>[建议] 转换成 <code>boolean</code> 时，使用 <code>!!</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line">!!num;</span><br></pre></td></tr></table></figure><h5 id="建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。"><a href="#建议-number-去除小数点，使用-Math-floor-Math-round-Math-ceil，不使用-parseInt。" class="headerlink" title="[建议] number 去除小数点，使用 Math.floor / Math.round / Math.ceil，不使用 parseInt。"></a>[建议] <code>number</code> 去除小数点，使用 <code>Math.floor</code> / <code>Math.round</code> / <code>Math.ceil</code>，不使用 <code>parseInt</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">Math</span>.ceil(num);</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">3.14</span>;</span><br><span class="line"><span class="built_in">parseInt</span>(num, <span class="number">10</span>);</span><br></pre></td></tr></table></figure><h3 id="3-5-字符串"><a href="#3-5-字符串" class="headerlink" title="3.5 字符串"></a>3.5 字符串</h3><h5 id="强制-字符串开头和结束使用单引号-39-。"><a href="#强制-字符串开头和结束使用单引号-39-。" class="headerlink" title="[强制] 字符串开头和结束使用单引号 &#39;。"></a>[强制] 字符串开头和结束使用单引号 <code>&#39;</code>。</h5><p>解释：</p><ol><li>输入单引号不需要按住 <code>shift</code>，方便输入。</li><li>实际使用中，字符串经常用来拼接 HTML。为方便 HTML 中包含双引号而不需要转义写法。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'我是一个字符串'</span>;</span><br><span class="line"><span class="keyword">var</span> html = <span class="string">'&lt;div class="cls"&gt;拼接HTML可以省去双引号转义&lt;/div&gt;'</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-使用-数组-或-拼接字符串。"><a href="#建议-使用-数组-或-拼接字符串。" class="headerlink" title="[建议] 使用 数组 或 + 拼接字符串。"></a>[建议] 使用 <code>数组</code> 或 <code>+</code> 拼接字符串。</h5><p>解释：</p><ol><li>使用 <code>+</code> 拼接字符串，如果拼接的全部是 StringLiteral，压缩工具可以对其进行自动合并的优化。所以，静态字符串建议使用 <code>+</code> 拼接。</li><li>在现代浏览器下，使用 <code>+</code> 拼接字符串，性能较数组的方式要高。</li><li>如需要兼顾老旧浏览器，应尽量使用数组拼接字符串。</li></ol><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用数组拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str = [</span><br><span class="line">    <span class="comment">// 推荐换行开始并缩进开始第一个字符串, 对齐代码, 方便阅读.</span></span><br><span class="line">    <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">        <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    <span class="string">'&lt;/ul&gt;'</span></span><br><span class="line">].join(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 `+` 拼接字符串</span></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">''</span> <span class="comment">// 建议第一个为空字符串, 第二个换行开始并缩进开始, 对齐代码, 方便阅读</span></span><br><span class="line">    + <span class="string">'&lt;ul&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第一项&lt;/li&gt;'</span>,</span><br><span class="line">    +    <span class="string">'&lt;li&gt;第二项&lt;/li&gt;'</span>,</span><br><span class="line">    + <span class="string">'&lt;/ul&gt;'</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。"><a href="#建议-使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。" class="headerlink" title="[建议] 使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。"></a>[建议] 使用字符串拼接的方式生成HTML，需要根据语境进行合理的转义。</h5><p>解释：</p><p>在 <code>JavaScript</code> 中拼接，并且最终将输出到页面中的字符串，需要进行合理转义，以防止安全漏洞。下面的示例代码为场景说明，不能直接运行。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// HTML 转义</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;p&gt;'</span> + htmlEncode(content) + <span class="string">'&lt;/p&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTML 转义</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;input type="text" value="'</span> + htmlEncode(value) + <span class="string">'"&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// URL 转义</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;a href="/?key='</span> + htmlEncode(urlEncode(value)) + <span class="string">'"&gt;link&lt;/a&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// JavaScript字符串 转义 + HTML 转义</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'&lt;button onclick="check(\''</span> + htmlEncode(strLiteral(name)) + <span class="string">'\')"&gt;提交&lt;/button&gt;'</span>;</span><br></pre></td></tr></table></figure><h5 id="建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。"><a href="#建议-复杂的数据到视图字符串的转换过程，选用一种模板引擎。" class="headerlink" title="[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。"></a>[建议] 复杂的数据到视图字符串的转换过程，选用一种模板引擎。</h5><p>解释：</p><p>使用模板引擎有如下好处：</p><ol><li>在开发过程中专注于数据，将视图生成的过程由另外一个层级维护，使程序逻辑结构更清晰。</li><li>优秀的模板引擎，通过模板编译技术和高质量的编译产物，能获得比手工拼接字符串更高的性能。</li><li>模板引擎能方便的对动态数据进行相应的转义，部分模板引擎默认进行HTML转义，安全性更好。</li></ol><ul><li>artTemplate: 体积较小，在所有环境下性能高，语法灵活。</li><li>dot.js: 体积小，在现代浏览器下性能高，语法灵活。</li><li>etpl: 体积较小，在所有环境下性能高，模板复用性高，语法灵活。</li><li>handlebars: 体积大，在所有环境下性能高，扩展性高。</li><li>hogon: 体积小，在现代浏览器下性能高。</li><li>nunjucks: 体积较大，性能一般，模板复用性高。</li></ul><h3 id="3-6-对象"><a href="#3-6-对象" class="headerlink" title="3.6 对象"></a>3.6 对象</h3><h5 id="强制-使用对象字面量-创建新-Object。"><a href="#强制-使用对象字面量-创建新-Object。" class="headerlink" title="[强制] 使用对象字面量 {} 创建新 Object。"></a>[强制] 使用对象字面量 <code>{}</code> 创建新 <code>Object</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure><h5 id="建议-对象创建时，如果一个对象的所有-属性-均可以不添加引号，建议所有-属性-不添加引号。"><a href="#建议-对象创建时，如果一个对象的所有-属性-均可以不添加引号，建议所有-属性-不添加引号。" class="headerlink" title="[建议] 对象创建时，如果一个对象的所有 属性 均可以不添加引号，建议所有 属性 不添加引号。"></a>[建议] 对象创建时，如果一个对象的所有 <code>属性</code> 均可以不添加引号，建议所有 <code>属性</code> 不添加引号。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    name: <span class="string">'someone'</span>,</span><br><span class="line">    age: <span class="number">28</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-建议添加-39-。"><a href="#建议-对象创建时，如果任何一个-属性-需要添加引号，则所有-属性-建议添加-39-。" class="headerlink" title="[建议] 对象创建时，如果任何一个 属性 需要添加引号，则所有 属性 建议添加 &#39;。"></a>[建议] 对象创建时，如果任何一个 <code>属性</code> 需要添加引号，则所有 <code>属性</code> 建议添加 <code>&#39;</code>。</h5><p>解释：</p><p>如果属性不符合 Identifier 和 NumberLiteral 的形式，就需要以 StringLiteral 的形式提供。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    <span class="string">'name'</span>: <span class="string">'someone'</span>,</span><br><span class="line">    <span class="string">'age'</span>: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    name: <span class="string">'someone'</span>,</span><br><span class="line">    age: <span class="number">28</span>,</span><br><span class="line">    <span class="string">'more-info'</span>: <span class="string">'...'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="强制-不允许修改和扩展任何原生对象和宿主对象的原型。"><a href="#强制-不允许修改和扩展任何原生对象和宿主对象的原型。" class="headerlink" title="[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。"></a>[强制] 不允许修改和扩展任何原生对象和宿主对象的原型。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下行为绝对禁止</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="建议-属性访问时，尽量使用-。"><a href="#建议-属性访问时，尽量使用-。" class="headerlink" title="[建议] 属性访问时，尽量使用 .。"></a>[建议] 属性访问时，尽量使用 <code>.</code>。</h5><p>解释：</p><p>属性名符合 Identifier 的要求，就可以通过 <code>.</code> 来访问，否则就只能通过 <code>[expr]</code> 方式访问。</p><p>通常在 JavaScript 中声明的对象，属性命名是使用 Camel 命名法，用 <code>.</code> 来访问更清晰简洁。部分特殊的属性（比如来自后端的 JSON ），可能采用不寻常的命名方式，可以通过 <code>[expr]</code> 方式访问。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info.age;</span><br><span class="line">info[<span class="string">'more-info'</span>];</span><br></pre></td></tr></table></figure><h5 id="建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。"><a href="#建议-for-in-遍历对象时-使用-hasOwnProperty-过滤掉原型中的属性。" class="headerlink" title="[建议] for in 遍历对象时, 使用 hasOwnProperty 过滤掉原型中的属性。"></a>[建议] <code>for in</code> 遍历对象时, 使用 <code>hasOwnProperty</code> 过滤掉原型中的属性。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newInfo = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> info) &#123;</span><br><span class="line">    <span class="keyword">if</span> (info.hasOwnProperty(key)) &#123;</span><br><span class="line">        newInfo[key] = info[key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-7-数组"><a href="#3-7-数组" class="headerlink" title="3.7 数组"></a>3.7 数组</h3><h5 id="强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。"><a href="#强制-使用数组字面量-创建新数组，除非想要创建的是指定长度的数组。" class="headerlink" title="[强制] 使用数组字面量 [] 创建新数组，除非想要创建的是指定长度的数组。"></a>[强制] 使用数组字面量 <code>[]</code> 创建新数组，除非想要创建的是指定长度的数组。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure><h5 id="强制-遍历数组不使用-for-in。"><a href="#强制-遍历数组不使用-for-in。" class="headerlink" title="[强制] 遍历数组不使用 for in。"></a>[强制] 遍历数组不使用 <code>for in</code>。</h5><p>解释：</p><p>数组对象可能存在数字以外的属性, 这种情况下 <code>for in</code> 不会得到正确结果。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里仅作演示, 实际中应使用 Object 类型</span></span><br><span class="line">arr.other = <span class="string">'other things'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误的遍历方式</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。"><a href="#建议-不因为性能的原因自己实现数组排序功能，尽量使用数组的-sort-方法。" class="headerlink" title="[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 sort 方法。"></a>[建议] 不因为性能的原因自己实现数组排序功能，尽量使用数组的 <code>sort</code> 方法。</h5><p>解释：</p><p>自己实现的常规排序算法，在性能上并不优于数组默认的 <code>sort</code> 方法。以下两种场景可以自己实现排序：</p><ol><li>需要稳定的排序算法，达到严格一致的排序结果。</li><li>数据特点鲜明，适合使用桶排。</li></ol><h5 id="建议-清空数组使用-length-0。"><a href="#建议-清空数组使用-length-0。" class="headerlink" title="[建议] 清空数组使用 .length = 0。"></a>[建议] 清空数组使用 <code>.length = 0</code>。</h5><h3 id="3-8-函数"><a href="#3-8-函数" class="headerlink" title="3.8 函数"></a>3.8 函数</h3><h4 id="3-8-1-函数长度"><a href="#3-8-1-函数长度" class="headerlink" title="3.8.1 函数长度"></a>3.8.1 函数长度</h4><h5 id="建议-一个函数的长度控制在-50-行以内。"><a href="#建议-一个函数的长度控制在-50-行以内。" class="headerlink" title="[建议] 一个函数的长度控制在 50 行以内。"></a>[建议] 一个函数的长度控制在 <code>50</code> 行以内。</h5><p>解释：</p><p>将过多的逻辑单元混在一个大函数中，易导致难以维护。一个清晰易懂的函数应该完成单一的逻辑单元。复杂的操作应进一步抽取，通过函数的调用来体现流程。</p><p>特定算法等不可分割的逻辑允许例外。</p><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">        y.checked = <span class="literal">true</span>;</span><br><span class="line">        z.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        y.checked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (a.value) &#123;</span><br><span class="line">        warning.innerText = <span class="string">''</span>;</span><br><span class="line">        submitButton.disabled = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        warning.innerText = <span class="string">'Please enter it'</span>;</span><br><span class="line">        submitButton.disabled = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接阅读该函数会难以明确其主线逻辑，因此下方是一种更合理的表达方式：</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncViewStateOnUserAction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    syncXStateToView();</span><br><span class="line">    checkAAvailability();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">syncXStateToView</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    y.checked = x.checked;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (x.checked) &#123;</span><br><span class="line">        z.value = <span class="string">''</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAAvailability</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.value) &#123;</span><br><span class="line">        clearWarnignForA();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        displayWarningForAMissing();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-2-参数设计"><a href="#3-8-2-参数设计" class="headerlink" title="3.8.2 参数设计"></a>3.8.2 参数设计</h4><h5 id="建议-一个函数的参数控制在-6-个以内。"><a href="#建议-一个函数的参数控制在-6-个以内。" class="headerlink" title="[建议] 一个函数的参数控制在 6 个以内。"></a>[建议] 一个函数的参数控制在 <code>6</code> 个以内。</h5><p>解释：</p><p>除去不定长参数以外，函数具备不同逻辑意义的参数建议控制在 <code>6</code> 个以内，过多参数会导致维护难度增大。</p><p>某些情况下，如使用 AMD Loader 的 <code>require</code> 加载多个模块时，其 <code>callback</code> 可能会存在较多参数，因此对函数参数的个数不做强制限制。</p><h5 id="建议-通过-options-参数传递非数据输入型参数。"><a href="#建议-通过-options-参数传递非数据输入型参数。" class="headerlink" title="[建议] 通过 options 参数传递非数据输入型参数。"></a>[建议] 通过 <code>options</code> 参数传递非数据输入型参数。</h5><p>解释：</p><p>有些函数的参数并不是作为算法的输入，而是对算法的某些分支条件判断之用，此类参数建议通过一个 <code>options</code> 参数传递。</p><p>如下函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> </span>element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, removeEventListeners</span>) </span>&#123;</span><br><span class="line">    element.parent.removeChild(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (removeEventListeners) &#123;</span><br><span class="line">        element.clearEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以转换为下面的签名：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除某个元素</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Node&#125;</span> </span>element 需要移除的元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Object&#125;</span> </span>options 相关的逻辑配置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;boolean&#125;</span> </span>options.removeEventListeners 是否同时将所有注册在元素上的事件移除</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeElement</span>(<span class="params">element, options</span>) </span>&#123;</span><br><span class="line">    element.parent.removeChild(element);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (options.removeEventListeners) &#123;</span><br><span class="line">        element.clearEventListeners();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种模式有几个显著的优势：</p><ul><li><code>boolean</code> 型的配置项具备名称，从调用的代码上更易理解其表达的逻辑意义。</li><li>当配置项有增长时，无需无休止地增加参数个数，不会出现 <code>removeElement(element, true, false, false, 3)</code> 这样难以理解的调用代码。</li><li>当部分配置参数可选时，多个参数的形式非常难处理重载逻辑，而使用一个 options 对象只需判断属性是否存在，实现得以简化。</li></ul><h4 id="3-8-3-闭包"><a href="#3-8-3-闭包" class="headerlink" title="3.8.3 闭包"></a>3.8.3 闭包</h4><h5 id="建议-在适当的时候将闭包内大对象置为-null。"><a href="#建议-在适当的时候将闭包内大对象置为-null。" class="headerlink" title="[建议] 在适当的时候将闭包内大对象置为 null。"></a>[建议] 在适当的时候将闭包内大对象置为 <code>null</code>。</h5><p>解释：</p><p>在 JavaScript 中，无需特别的关键词就可以使用闭包，一个函数可以任意访问在其定义的作用域外的变量。需要注意的是，函数的作用域是静态的，即在定义时决定，与调用的时机和方式没有任何关系。</p><p>闭包会阻止一些变量的垃圾回收，对于较老旧的 JavaScript 引擎，可能导致外部所有变量均无法回收。</p><p>首先一个较为明确的结论是，以下内容会影响到闭包内变量的回收：</p><ul><li>嵌套的函数中是否有使用该变量。</li><li>嵌套的函数中是否有 <strong>直接调用eval</strong>。</li><li>是否使用了 with 表达式。</li></ul><p>Chakra、V8 和 SpiderMonkey 将受以上因素的影响，表现出不尽相同又较为相似的回收策略，而 JScript.dll 和 Carakan 则完全没有这方面的优化，会完整保留整个 LexicalEnvironment 中的所有变量绑定，造成一定的内存消耗。</p><p>由于对闭包内变量有回收优化策略的 Chakra、V8 和 SpiderMonkey 引擎的行为较为相似，因此可以总结如下，当返回一个函数 <strong>fn</strong> 时：</p><ol><li>如果 <strong>fn</strong> 的 <code>[[Scope]]</code> 是 ObjectEnvironment（with 表达式生成 ObjectEnvironment，函数和 catch 表达式生成 DeclarativeEnvironment），则：<ol><li>如果是 V8 引擎，则退出全过程。</li><li>如果是 SpiderMonkey，则处理该 ObjectEnvironment 的外层 LexicalEnvironment。</li></ol></li><li>获取当前 LexicalEnvironment 下的所有类型为 Function 的对象，对于每一个 Function 对象，分析其 FunctionBody：<ol><li>如果 FunctionBody 中含有 <strong>直接调用 eval</strong>，则退出全过程。</li><li>否则得到所有的 Identifier。</li><li>对于每一个 Identifier，设其为 <strong>name</strong>，根据查找变量引用的规则，从 LexicalEnvironment 中找出名称为 <strong>name</strong> 的绑定 binding。</li><li>对 binding 添加 <strong>notSwap</strong> 属性，其值为 <code>true</code>。</li></ol></li><li>检查当前 LexicalEnvironment 中的每一个变量绑定，如果该绑定有 <strong>notSwap</strong> 属性且值为 <code>true</code>，则：<ol><li>如果是 V8 引擎，删除该绑定。</li><li>如果是 SpiderMonkey，将该绑定的值设为 <code>undefined</code>，将删除 <strong>notSwap</strong> 属性。</li></ol></li></ol><p>对于 Chakra 引擎，暂无法得知是按 V8 的模式还是按 SpiderMonkey 的模式进行。</p><p>如果有 <strong>非常庞大</strong> 的对象，且预计会在 <strong>老旧的引擎</strong> 中执行，则使用闭包时，注意将闭包不需要的对象置为空引用。</p><h5 id="建议-使用-IIFE-避免-Lift-效应。"><a href="#建议-使用-IIFE-避免-Lift-效应。" class="headerlink" title="[建议] 使用 IIFE 避免 Lift 效应。"></a>[建议] 使用 <code>IIFE</code> 避免 <code>Lift 效应</code>。</h5><p>解释：</p><p>在引用函数外部变量时，函数执行时外部变量的值由运行时决定而非定义时，最典型的场景如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    tasks[tasks.length] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上代码对 tasks 中的函数的执行均会输出 <code>Current cursor is at 5</code>，往往不符合预期。</p><p>此现象称为 <strong>Lift 效应</strong> 。解决的方式是通过额外加上一层闭包函数，将需要的外部变量作为参数传递来解除变量的绑定关系：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tasks = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 注意有一层额外的闭包</span></span><br><span class="line">    tasks[tasks.length] = (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Current cursor is at '</span> + i);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> len = tasks.length;</span><br><span class="line"><span class="keyword">while</span> (len--) &#123;</span><br><span class="line">    tasks[len]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-8-4-空函数"><a href="#3-8-4-空函数" class="headerlink" title="3.8.4 空函数"></a>3.8.4 空函数</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;me-JavaScript规范&quot;&gt;&lt;a href=&quot;#me-JavaScript规范&quot; class=&quot;headerlink&quot; title=&quot;me JavaScript规范&quot;&gt;&lt;/a&gt;me JavaScript规范&lt;/h1&gt;&lt;h2 id=&quot;1-代码规范&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript基础</title>
    <link href="http://yoursite.com/2018/09/02/Javascript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/09/02/Javascript%E5%9F%BA%E7%A1%80%E7%AC%94%E8%AE%B0/</id>
    <published>2018-09-02T15:21:38.000Z</published>
    <updated>2020-07-12T09:38:01.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Javascript基础笔记"><a href="#Javascript基础笔记" class="headerlink" title="Javascript基础笔记"></a>Javascript基础笔记</h1><h2 id="一、-Javascript简介"><a href="#一、-Javascript简介" class="headerlink" title="一、 Javascript简介"></a>一、 Javascript简介</h2><h4 id="1-JavaScript的历史"><a href="#1-JavaScript的历史" class="headerlink" title="1.JavaScript的历史"></a>1.JavaScript的历史</h4><ul><li><h5 id="1994年，网景公司推出第一款真正意义上的浏览器"><a href="#1994年，网景公司推出第一款真正意义上的浏览器" class="headerlink" title="1994年，网景公司推出第一款真正意义上的浏览器"></a>1994年，网景公司推出第一款真正意义上的浏览器</h5></li><li><h5 id="1995年-sun-公司推出了Java"><a href="#1995年-sun-公司推出了Java" class="headerlink" title="1995年 , sun 公司推出了Java"></a>1995年 , sun 公司推出了Java</h5></li><li><h5 id="1995年-网景公司-sun公司-和网景公司的员工-布兰登-·-艾克-一起开发了-JavaScript"><a href="#1995年-网景公司-sun公司-和网景公司的员工-布兰登-·-艾克-一起开发了-JavaScript" class="headerlink" title="1995年 , 网景公司 , sun公司 和网景公司的员工 布兰登 · 艾克 一起开发了 JavaScript"></a>1995年 , 网景公司 , sun公司 和网景公司的员工 布兰登 · 艾克 一起开发了 JavaScript</h5></li></ul><h4 id="2-JavaScript的概述与作用"><a href="#2-JavaScript的概述与作用" class="headerlink" title="2.JavaScript的概述与作用"></a>2.JavaScript的概述与作用</h4><p>概述：<strong>JavaScript</strong> 是一门动态的、弱类型、轻量级的解释型高级编程语言。它基于原型，支持面向对象 和函数式编程等多种编程范式。通常称为 <strong>js</strong>。</p><p>作用：实现页面的交互 ：用户操作的交互 , 数据的交互！</p><h4 id="3-JavaScript的组成部分"><a href="#3-JavaScript的组成部分" class="headerlink" title="3.JavaScript的组成部分"></a>3.JavaScript的组成部分</h4><ul><li>一个完整的 <strong>JavaScript</strong> 实现是由以下3个不同部分组成的：核心（<strong>ECMAScript</strong>）描述了JavaScript语法和对象、文档对象模型（<strong>Document Object Model</strong>，简称 <strong>DOM</strong>）、浏览器对象模型（<strong>Browser Object Model</strong>，简称 <strong>BOM</strong>） </li><li><strong>window</strong> 是 <strong>JavaScript</strong> 中的内置对象，代表整个浏览器窗口，是 <strong>BOM</strong> 中的一员 ，浏览器对象模型 – 操作 浏览器。</li><li><strong>documenet</strong> 是 <strong>JavaScript</strong> 中的内置对象，每个载入浏览器的 <strong>HTML</strong> 文档都会成为 <strong>document</strong> 对象，是<strong>DOM</strong> 中的一员 ，文档对象模型 – 操作HTML,css。</li></ul><h2 id="二、JavaScript的语法"><a href="#二、JavaScript的语法" class="headerlink" title="二、JavaScript的语法"></a>二、JavaScript的语法</h2><h4 id="1-行内式"><a href="#1-行内式" class="headerlink" title="1.行内式"></a>1.行内式</h4><p>​    在 标签中 直接定义 JavaScript的 代码内容(这种语法不推荐使用,书写不方便,而且不利于重复使用一般做调试使用)</p><h4 id="2-内部式"><a href="#2-内部式" class="headerlink" title="2.内部式"></a>2.内部式</h4><p>​    在script标签中,直接定义JavaScript代码   —–&gt;    一般放在 body内部的最下方,也就是所有的html标签的内容的最后,因为牵扯到 代码的执行顺序</p><h4 id="3-外部式"><a href="#3-外部式" class="headerlink" title="3.外部式"></a>3.外部式</h4><p>​    在 外部 js 文件中 (也就是扩展名是 js的文件),直接定义 JavaScript代码,通过一个 带有 src 属性的 script标签,来导入 </p><h4 id="4-特殊标签-—-gt-a标签"><a href="#4-特殊标签-—-gt-a标签" class="headerlink" title="4.特殊标签   —&gt;   a标签"></a>4.特殊标签   —&gt;   a标签</h4><p>​    超链接是一个特殊的标签,特殊在如果要执行JavaScript程序，超链接标签,href的属性值,必须定义为 JavaScript:; 才会执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：&lt;a href&#x3D;&quot;JavaScript:;&quot; id&#x3D;&quot;a1&quot;&gt;百度&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure><h2 id="三、JavaScript-变量"><a href="#三、JavaScript-变量" class="headerlink" title="三、JavaScript 变量"></a>三、JavaScript 变量</h2><h4 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h4><p>​    官方定义：存储在内存之中的,带有名称的,数据信息,其中存储的数据,在执行过程中,是可以改变的。<br>    实际上 就是容器 , 存储数据的容器.所有的计算机程序,数据都会存储咋变量中,通过操作变量,来操作数据。</p><h4 id="2-规则-—-gt-必须遵守"><a href="#2-规则-—-gt-必须遵守" class="headerlink" title="2.规则  —-&gt;   必须遵守"></a>2.规则  —-&gt;   必须遵守</h4><ul><li>变量名称的内容,只能是数字,字母(大小写都可以),下划线 _  ,美元符号 $</li><li>不能以数字开头 一般是以字母或者下划线开头</li><li>严格区分大小写</li><li>不要使用保留词和关键词 —-&gt;例如function,push等，程序原有意义的名称</li></ul><h4 id="3-建议遵守的规则"><a href="#3-建议遵守的规则" class="headerlink" title="3.建议遵守的规则"></a>3.建议遵守的规则</h4><ul><li>不要使用中文</li><li>见名知意 – 看见变量名称,就知道存储的是什么数据</li><li>驼峰命名法 – 多个单词组成的变量名称,每个单词的首字符大写<pre><code>大驼峰：UserName  UserPwd </code></pre>   小驼峰 – 第二个单词开始,首字符大写：userName  userPwd</li></ul><h2 id="四、JavaScript-数据类型"><a href="#四、JavaScript-数据类型" class="headerlink" title="四、JavaScript 数据类型"></a>四、JavaScript 数据类型</h2><h4 id="1-布尔类型-布尔值-Boolean-bool"><a href="#1-布尔类型-布尔值-Boolean-bool" class="headerlink" title="1.布尔类型/布尔值(Boolean / bool )"></a>1.布尔类型/布尔值(Boolean / bool )</h4><p>​    在计算机语言中,布尔值,表示 真(true) / 假(false) 这样的两个数值,往往是 比较 或者 判断的结果.</p><h4 id="2-字符串类型-String-str"><a href="#2-字符串类型-String-str" class="headerlink" title="2.字符串类型(String / str)"></a>2.字符串类型(String / str)</h4><p>​    只要是用单双引号包在一起的都是字符串类型</p><p>​    引号,双引号的字符串,都不能解析变量，解析变量的方法：<br>    方法1,使用字符串拼接方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var airPollution &#x3D; 52 ; </span><br><span class="line"> console.log( &#39;今天的空气污染是 : airPollution&#39; );</span><br></pre></td></tr></table></figure><p>​    方法2,使用模板字符串,可以解析变量，模板字符串 使用的 是 反引号 <code></code>  (键盘上方 1 左侧的按钮),使用 ${} 包裹变量        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log( &#96;今天的空气污染是 : $&#123;airPollution&#125;&#96; );</span><br></pre></td></tr></table></figure><p>注：字符串的拼接，将两个字符串,拼接为一个字符串,称为字符串的拼接，拼接符用”+“。可以多个字符串拼接，只要拼接的一方是字符串，就执行字符串拼接操作</p><h4 id="3-数值类型"><a href="#3-数值类型" class="headerlink" title="3.数值类型"></a>3.数值类型</h4><h5 id="A-整数-integer-int"><a href="#A-整数-integer-int" class="headerlink" title="A.整数(integer / int)"></a>A.整数(integer / int)</h5><p>​        包括二进制，八进制，十进制，十六进制</p><h5 id="B-小数-浮点数float"><a href="#B-小数-浮点数float" class="headerlink" title="B.小数(浮点数float)"></a>B.小数(浮点数float)</h5><p>​        有效数值：在JavaScript中,对于浮点数的总位数有规定,一个浮点数,有效数字/有效数值,最多 17 位,所谓的有效数字,值得是,左起,非零的数值</p><p>​        科学计数法：2e3表示2乘10的3次方，虽然是个整数，但是程序当浮点数处理</p><p>​        浮点数的误差 ： 浮点数的 精度丢失 / 精度溢出</p><h5 id="C-NaN"><a href="#C-NaN" class="headerlink" title="C.NaN"></a>C.NaN</h5><p>​        定义：不是一个数值</p><p>​        运算 ,只要有NaN参与,执行结果都是NaN，如果是加法运算并且有字符串参与 , 则进行字符串拼接操作</p><p>​        注：NaN 永远 不会等于 NaN  NaN == NaN  执行结果是 false，因为JavaScript的规定, NaN表示的是非数字, 但是这个非数字也是不同的</p><h4 id="4-undefined和null"><a href="#4-undefined和null" class="headerlink" title="4.undefined和null"></a>4.undefined和null</h4><p>​    undefined 表示没有数值 — 应该有数值,但是现在没有数值<br>     null      表示数值为空 — 表示有数值,但是数值是”空”<br>    可以直接给变量,赋值 undefined 和 null，但是必须时小写的</p><h2 id="五、JavaScript的三种调试方法"><a href="#五、JavaScript的三种调试方法" class="headerlink" title="五、JavaScript的三种调试方法"></a>五、JavaScript的三种调试方法</h2><h5 id="1-window-alert-‘内容’-—-弹出提示框"><a href="#1-window-alert-‘内容’-—-弹出提示框" class="headerlink" title="1, window.alert(‘内容’) — 弹出提示框"></a>1, window.alert(‘内容’) — 弹出提示框</h5><h5 id="2-document-write-‘内容’-—-在页面输出"><a href="#2-document-write-‘内容’-—-在页面输出" class="headerlink" title="2, document.write(‘内容’) — 在页面输出"></a>2, document.write(‘内容’) — 在页面输出</h5><h5 id="3-console-log-‘内容’-—-控制台输出-—-浏览器控制台-console-内容中（常用）"><a href="#3-console-log-‘内容’-—-控制台输出-—-浏览器控制台-console-内容中（常用）" class="headerlink" title="3, console.log(‘内容’) — 控制台输出 — 浏览器控制台 console 内容中（常用）"></a>3, console.log(‘内容’) — 控制台输出 — 浏览器控制台 console 内容中（常用）</h5><h2 id="六、数据类型的检测"><a href="#六、数据类型的检测" class="headerlink" title="六、数据类型的检测"></a>六、数据类型的检测</h2><h4 id="1-isNaN（变量）"><a href="#1-isNaN（变量）" class="headerlink" title="1.isNaN（变量）"></a>1.isNaN（变量）</h4><ul><li>作用：判断一个数据是不是数字 <code>console.log(isNaN(NaN))</code></li><li>返回值：<strong>true</strong> 或 <strong>false</strong></li><li><strong>isNaN</strong>（变量）：如果变量是一个数字，返回 <strong>false</strong>；如果变量不是一个数字，返回 <strong>true</strong> </li></ul><h4 id="2-typeof-变量-数据-方法"><a href="#2-typeof-变量-数据-方法" class="headerlink" title="2.typeof(变量/数据)方法"></a>2.typeof(变量/数据)方法</h4><ul><li>作用：查询变量中存储数据的数据类型<code>console.log(typeof(变量))</code></li><li>返回值：数据类型</li><li>typeof 并不能非常准确的表示每一种数据类型，一般是使用判断  布尔类型 数值类型 字符串类型 undefined类型</li></ul><h2 id="七、数据类型的转化"><a href="#七、数据类型的转化" class="headerlink" title="七、数据类型的转化"></a>七、数据类型的转化</h2><h4 id="1-其他数据类型转化为Number数据类型："><a href="#1-其他数据类型转化为Number数据类型：" class="headerlink" title="1.其他数据类型转化为Number数据类型："></a>1.其他数据类型转化为Number数据类型：</h4><p>自动转换：布尔类型 : <strong>true</strong>  —&gt;  1， <strong>false</strong> —&gt;  0，<strong>undefined</strong> : 转化为 NaN ，<strong>null</strong> : 转化为 0</p><p>​            如果整个字符串,是纯数字字符串,或者符合科学计数法 —&gt; 转化为对应的数值</p><p>​            如果字符串内有不符合数字规范的内容 —&gt; 转化为 NaN</p><p>​            数组,对象,函数执行结果都是 NaN</p><p>强制转换：</p><ul><li><p><strong>Number(变量)</strong></p><ul><li>转换成 <strong>number</strong> 数据类型，把数据看成一个整体去转换，那么如果变量中的数据不完全是数字的话，就会得到一个 <strong>NaN</strong></li></ul></li><li><p><strong>parseInt(变量)</strong></p><ul><li>使用 *<em>pasrInt() *</em>转换，不是将数字看成一个整体，而是从数据的最左边开始识别，当遇到不是数字的字符之后，会停止转换，返回前面的数字</li></ul></li><li><p><strong>parseFloat(变量)</strong></p><ul><li>带小数点的 <strong>number</strong> 类型，只识别一次小数点</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> age=<span class="string">'18.3.35a'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(age));   <span class="comment">//18.3</span></span><br></pre></td></tr></table></figure></li><li><p><strong>隐式转换</strong></p><ul><li>操作除了+以外的数学运算 <strong>[-   *   /   %]</strong></li></ul></li></ul><h4 id="2-其他数据类型转化为String数据类型："><a href="#2-其他数据类型转化为String数据类型：" class="headerlink" title="2.其他数据类型转化为String数据类型："></a>2.其他数据类型转化为String数据类型：</h4><p>自动转换：执行 字符串拼接 时, 会将其他数据类型转化为字符串类型</p><p>​           特殊<br>            <strong>数组</strong> —&gt; 将 [] 中的内容,转化为字符串的形式,进行拼接<br>             <strong>对象</strong> —&gt; 任何对象,任何内容,都会转化为 [object Object] 固定的内容形式<br>            <strong>函数</strong> —&gt; 将所有的程序代码,转化为字符串</p><p>强制转换：</p><ul><li><strong>String(变量)</strong><ul><li>转换成字符串类型</li></ul></li><li><strong>toString()</strong><ul><li>语法：<strong>变量.toString(进制数)</strong></li><li>注意：进制范围2~36，.toString前必须写变量，不能写数值</li></ul></li></ul><h4 id="3-其他数据类型转换为Boolean数据类型："><a href="#3-其他数据类型转换为Boolean数据类型：" class="headerlink" title="3.其他数据类型转换为Boolean数据类型："></a>3.其他数据类型转换为Boolean数据类型：</h4><p>自动转换：在 执行 if 判断时 ,其他数据类型会自动转化为布尔类型。</p><p>​           转换为<strong>false</strong>的有：<strong>’ ‘、NaN、0、undefined、null</strong>，其他的都为true.</p><p>强制转换：</p><p>Boolean( 数据/变量 ),转化原则与自动转化原则相同。false : 0   ‘’   undefined  null  NaN。true  : 其他数据,都转化为true</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：console.log( Boolean(100) );</span><br></pre></td></tr></table></figure><h2 id="八、JavaScript运算符"><a href="#八、JavaScript运算符" class="headerlink" title="八、JavaScript运算符"></a>八、JavaScript运算符</h2><h4 id="1-算数运算符："><a href="#1-算数运算符：" class="headerlink" title="1.算数运算符："></a>1.算数运算符：</h4><ul><li>加（+）：<ul><li><strong>+</strong> 号两边的数都是 <strong>number</strong> 类型的数字才会进行加法运算，如果+号两边有一边为 <strong>string</strong> 数据类型就会进行字符串的拼接。 </li></ul></li><li>减（-）</li><li>乘（*）</li><li>除（/）<ul><li>除数,也就是第二个数值,不能为 0，若为0执行结果为Infinity(表示无穷大)    </li></ul></li><li>求余（取模）（%）<ul><li>余数可以为负值，余数的正负 与 被除数(第一个数值)的正负相同</li></ul></li></ul><h4 id="2-赋值运算符：都会先把右侧的表达式-计算出一个结果-再与左侧变量进行运算"><a href="#2-赋值运算符：都会先把右侧的表达式-计算出一个结果-再与左侧变量进行运算" class="headerlink" title="2.赋值运算符：都会先把右侧的表达式,计算出一个结果,再与左侧变量进行运算"></a>2.赋值运算符：都会先把右侧的表达式,计算出一个结果,再与左侧变量进行运算</h4><ul><li><strong>= ：</strong>简单的赋值，把右边的值赋值给左边的变量<ul><li>一个变量中,只能存储一个数据</li></ul></li><li><strong>+= ：</strong>把符号左边的变量值+右边的值，然后在赋值给左边的变量<ul><li>如果是有字符串参与,执行的字符串拼接操作</li></ul></li><li><strong>-= ：</strong>把符号左边的变量值-右边的值，然后在赋值给左边的变量</li><li><strong>*= ：</strong>把符号左边的变量值*右边的值，然后在赋值给左边的变量</li><li><strong>/= ：</strong>把符号左边的变量值/右边的值，然后在赋值给左边的变量</li><li><strong>%= ：</strong>把符号左边的变量值%右边的值，然后在赋值给左边的变量<ul><li>是模进行运算</li></ul></li></ul><h4 id="3-关系（比较）运算符：结果一定是-布尔类型-true-false"><a href="#3-关系（比较）运算符：结果一定是-布尔类型-true-false" class="headerlink" title="3.关系（比较）运算符：结果一定是 布尔类型  true / false"></a>3.关系（比较）运算符：结果一定是 布尔类型  true / false</h4><ul><li><strong>＞：</strong>大于</li><li><strong>＜：</strong>小于</li><li><strong>＞=：</strong>大于等于</li><li><strong>＜=：</strong>小于等于</li><li><strong>==：</strong>等于（只比较两个变量的值，而不管数据类型）</li><li><strong>!=：</strong>不等于</li><li><strong>===：</strong>全等（既比较变量，也判断数据类型）</li><li><strong>!==：</strong>全不等</li></ul><h4 id="4-自增自减运算符（一元运算符）"><a href="#4-自增自减运算符（一元运算符）" class="headerlink" title="4.自增自减运算符（一元运算符）"></a>4.自增自减运算符（一元运算符）</h4><p><strong>前置运算符：++i;–i;</strong>      —-&gt;前置是将自身自加1/自减1并改变自身的存储变量，然后再参与程序的执行</p><p><strong>后置运算符：i++;i–;</strong>      —-&gt;后置是当前位置上 不执行++操作,也就是不改变 变量中存储的原始数值，当前位置上 仍然是原始数值参与该程序的执行，从下一个位置,也就是下一次使用变量时,显示++ 操作的结果</p><p><strong>注：</strong>当执行自增，自减操作时，都会改变内部的存储变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span>;              </span><br><span class="line">b = a++ + ++a ; <span class="comment">//b=0+2</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">//a为2</span></span><br><span class="line"><span class="built_in">console</span>.log(b);<span class="comment">//b为2</span></span><br></pre></td></tr></table></figure><h4 id="5-逻辑运算符"><a href="#5-逻辑运算符" class="headerlink" title="5.逻辑运算符"></a>5.逻辑运算符</h4><ul><li><p><strong>&amp;&amp;（与）：</strong></p><ul><li>“&amp;&amp;”逻辑与(并且关系)。如果左右两个两个条件同时满足时，则结果为true，否则，结果为false</li></ul></li><li><p><strong>||（或）：</strong></p><ul><li>“||”逻辑或。左右两个条件，只要有一个满足，则返回true，否则，返回false。 </li></ul></li><li><p><strong>！（非）：</strong></p><ul><li>“!”取反运算。<code>!true = false    !false = true    !100 = false</code></li></ul><p><strong>逻辑运算符的短路求值</strong>：为了提高程序的执行效果,如果最终的结果已经确定,多余的程序就不会执行</p><p>​    <strong>逻辑与 表达式1 &amp;&amp; 表达式2</strong></p><pre><code>两个表达式的结果,都是true,逻辑与的结果才是true第一个表达式结果是 false  第二个表达式的内容不执行 整个逻辑就是false</code></pre><p>​    <strong>逻辑或 表达式1 || 表达式2</strong></p><pre><code>当 两个表达式都是false , 逻辑或的结果是false逻辑或 第一个表达式结果是 true  第二个表达式的内容不执行</code></pre></li></ul><h4 id="6-三元运算符-三目"><a href="#6-三元运算符-三目" class="headerlink" title="6.三元运算符(三目)"></a>6.三元运算符(三目)</h4><p>语法：<strong>条件 ? 值1 : 值2</strong></p><ul><li>条件成立执行值1，否则执行值2</li></ul><h2 id="九-JavaScript-流程控制（顺序结构）"><a href="#九-JavaScript-流程控制（顺序结构）" class="headerlink" title="九.JavaScript 流程控制（顺序结构）"></a>九.JavaScript 流程控制（顺序结构）</h2><h4 id="1-顺序结构："><a href="#1-顺序结构：" class="headerlink" title="1.顺序结构："></a>1.顺序结构：</h4><ul><li>正常的代码执行顺序（从上到下，从左到右）</li><li><strong>JavaScript</strong> 是一个单线程执行语言</li></ul><h4 id="2-选择结构："><a href="#2-选择结构：" class="headerlink" title="2.选择结构："></a>2.选择结构：</h4><h5 id="A-if-分支结构："><a href="#A-if-分支结构：" class="headerlink" title="A.if 分支结构："></a>A.if 分支结构：</h5><ul><li><strong>if</strong> 单分支语句语法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    当条件成立（<span class="literal">true</span>）才执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>if</strong> 双分支语句语法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件)&#123;</span><br><span class="line">    条件成立时执行的语句</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    条件不成立时执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>if</strong> 多分支语句语法：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(条件<span class="number">1</span>)&#123;</span><br><span class="line">    条件<span class="number">1</span>成立时执行的语句</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">2</span>)&#123;</span><br><span class="line">    条件<span class="number">1</span>不满足，条件<span class="number">2</span>成立时执行的语句</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(条件<span class="number">3</span>)&#123;</span><br><span class="line">    条件<span class="number">1</span>和条件<span class="number">2</span>不满足，条件<span class="number">3</span>成立时执行的语句</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    当所有条件都不执行时执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="B-switch-多值匹配结构："><a href="#B-switch-多值匹配结构：" class="headerlink" title="B.switch 多值匹配结构："></a>B.switch 多值匹配结构：</h5><ul><li><strong>switch</strong> 分岔，根据特定的值，选择要执行的代码</li><li>语法如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (要判断的变量) &#123;</span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">1</span>:</span><br><span class="line">    情况<span class="number">1</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">2</span>:</span><br><span class="line">    情况<span class="number">2</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">case</span> 情况<span class="number">3</span>:</span><br><span class="line">    情况<span class="number">3</span>要执行的代码</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    上述情况都不满足的时候执行的代码</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>switch</strong> 语法需要注意：<ul><li><strong>switch</strong> 中是值匹配，且用全等于（===）来匹配</li><li><strong>case</strong> 穿透：当匹配到一个 <strong>case</strong> 值之后，就跳转到当前匹配case值并执行以下所有代码，比if更高效。 </li><li><strong>switch</strong> 使用 <strong>break</strong> 解决 <strong>case</strong> 穿透 ，防止全部输出。</li></ul></li></ul><h4 id="3-循环结构："><a href="#3-循环结构：" class="headerlink" title="3.循环结构："></a>3.循环结构：</h4><h5 id="A-while-循环："><a href="#A-while-循环：" class="headerlink" title="A.while 循环："></a>A.while 循环：</h5><ul><li>语法如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>]初始化值</span><br><span class="line"><span class="keyword">while</span>([<span class="number">2</span>]条件)&#123;</span><br><span class="line">    [<span class="number">3</span>]满足条件时执行的代码</span><br><span class="line">    [<span class="number">4</span>]变量更新（不进行变量更新，会导致死循环）</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="B-do…while-循环："><a href="#B-do…while-循环：" class="headerlink" title="B.do…while 循环："></a>B.do…while 循环：</h5><ul><li>语法如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>初始化值]</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    [<span class="number">3</span>]满足条件时执行的代码</span><br><span class="line">    [<span class="number">4</span>]变量更新</span><br><span class="line">&#125;<span class="keyword">while</span>( [<span class="number">2</span>]条件 )</span><br></pre></td></tr></table></figure><ul><li>注意：<strong>do…while</strong> 循环，不管 <strong>while</strong> 的条件成不成立，那么 <strong>do</strong> 中的代码都会被执行一次 </li></ul><h5 id="C-for循环结构：执行顺序很重要"><a href="#C-for循环结构：执行顺序很重要" class="headerlink" title="C.for循环结构：执行顺序很重要"></a>C.for循环结构：执行顺序很重要</h5><ul><li>语法如下：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( [<span class="number">1</span>]初始化值 ; [<span class="number">2</span>]条件 ; [<span class="number">4</span>]变量更新 )&#123;</span><br><span class="line">    [<span class="number">3</span>]满足条件时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>案列：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用for循环打印1-100</span></span><br><span class="line"><span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">1</span>; i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="D-for循环嵌套-–-gt-先进入外层循环，执行内层循环（把内层循环执行结束后，然后第二次进入外层循环）"><a href="#D-for循环嵌套-–-gt-先进入外层循环，执行内层循环（把内层循环执行结束后，然后第二次进入外层循环）" class="headerlink" title="D.for循环嵌套 –&gt;先进入外层循环，执行内层循环（把内层循环执行结束后，然后第二次进入外层循环）"></a>D.for循环嵌套 –&gt;先进入外层循环，执行内层循环（把内层循环执行结束后，然后第二次进入外层循环）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//做九九乘法表</span></span><br><span class="line"><span class="keyword">var</span> int1=<span class="string">''</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i =<span class="number">1</span>; i&lt;=<span class="number">9</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">1</span>; j &lt;= i; j++)&#123;</span><br><span class="line">                int1 += j + <span class="string">'×'</span> + i + <span class="string">'='</span> + j * i +<span class="string">'&amp;nbsp;&amp;nbsp;&amp;nbsp;'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            int1 += <span class="string">'&lt;br/&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.write(int1);</span><br></pre></td></tr></table></figure><h2 id="十、break-和-continue-的区别"><a href="#十、break-和-continue-的区别" class="headerlink" title="十、break 和 continue 的区别"></a>十、break 和 continue 的区别</h2><h4 id="1、break："><a href="#1、break：" class="headerlink" title="1、break："></a>1、break：</h4><ul><li>在循环中使用 <strong>break</strong> 时，终断循环（跳出循环），终断整个循环</li></ul><h4 id="2、continue："><a href="#2、continue：" class="headerlink" title="2、continue："></a>2、continue：</h4><ul><li>终断本次循环，继续进行下一次循环</li></ul><h2 id="十一、JavaScript函数"><a href="#十一、JavaScript函数" class="headerlink" title="十一、JavaScript函数"></a>十一、JavaScript函数</h2><h4 id="1-函数的定义和特点"><a href="#1-函数的定义和特点" class="headerlink" title="1.函数的定义和特点"></a>1.函数的定义和特点</h4><ul><li>定义：实现固定功能的代码块函数是工具,是实现功能的工具</li><li>特点：<strong>封装</strong>: 将需要的代码,写入到函数中<pre><code>**重复**: 一个函数可以反复调用**调用**: 可以在任意需要位置上调用执行代码</code></pre></li></ul><h4 id="2-函数的创建-封装-所谓封装，将代码放在函数中"><a href="#2-函数的创建-封装-所谓封装，将代码放在函数中" class="headerlink" title="2.函数的创建/封装(所谓封装，将代码放在函数中)"></a>2.函数的创建/封装(所谓封装，将代码放在函数中)</h4><ul><li>函数声明：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数声明式创建函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//需要编写的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// function: 声明函数的关键字，表示接下来是一个函数了</span></span><br><span class="line"><span class="comment">// f1: 函数的名字，我们自己定义的（遵循变量名的命名规则和命名规范）</span></span><br><span class="line"><span class="comment">// (): 必须写，是用来放参数的位置（一会我们再聊）</span></span><br><span class="line"><span class="comment">// &#123;&#125;: 就是我们用来放一段代码的位置（也就是我们刚才说的 “盒子”）</span></span><br></pre></td></tr></table></figure><ul><li>字面量方式创建（赋值式）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//需要编写的代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 Function 构造函数创建（不推荐使用）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f3 = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'参数1'</span>,<span class="string">'参数2'</span>,...,<span class="string">'函数要执行的代码'</span>)；</span><br><span class="line"><span class="comment">//构造函数的参数中最后一个参数为函数体的内容，其余均为函数的形参</span></span><br></pre></td></tr></table></figure><h4 id="3-函数的调用和执行-函数不调用不执行"><a href="#3-函数的调用和执行-函数不调用不执行" class="headerlink" title="3.函数的调用和执行(函数不调用不执行)"></a>3.函数的调用和执行(函数不调用不执行)</h4><ul><li>函数名(实参);，可以在任何地方调用，但如果定义函数是使用变量定义，就必须在定义函数后调用</li></ul><h4 id="4-函数的参数"><a href="#4-函数的参数" class="headerlink" title="4.函数的参数"></a>4.函数的参数</h4><ul><li><p><strong>形参：</strong></p><ul><li>在函数声明时写在函数名后面圆括号中的变量</li><li>相当于在函数内部定义一个变量 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aa</span>(<span class="params">a,b,c</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>实参：</strong></p><ul><li>在函数调用时写在函数名后面圆括号中的数据</li><li>实实在在的数据，给形参赋值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aa(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>参数个数的关系：</strong></p><ul><li>形参个数 = 实参个数：实参从左到右一一给形参赋值</li><li>形参个数 &gt; 实参个数：实参从左到右一一给形参赋值，但多余的形参没有值时，就会得到 <strong>undefined</strong></li><li>形参个数 &lt; 实参个数：实参从左到右一一给形参赋值，函数内部拿不到多余的实参</li></ul></li></ul><h4 id="5-函数的返回值"><a href="#5-函数的返回值" class="headerlink" title="5.函数的返回值"></a>5.函数的返回值</h4><ul><li>函数体中 <strong>return</strong> 语句给函数一个返回值 或者 终止函数的执行。</li><li>当 <strong>return</strong> 语句被执行时，函数立即返回而不在执行 剩余的代码</li><li>return语句后面 跟上你要返回的数据（可以是一个表达式，可以式任意的数据类型）</li><li>注：函数总是有一个返回值，如果函数体中没有 <strong>return</strong> 语句或者 <strong>return</strong> 后面为空，那么函数将总式返回一个 <strong>undefined</strong></li></ul><h4 id="6-计算机的内存-栈和堆"><a href="#6-计算机的内存-栈和堆" class="headerlink" title="6.计算机的内存(栈和堆)"></a>6.计算机的内存(栈和堆)</h4><ul><li><p><strong>栈</strong>： </p><ul><li><p><strong>存储类型</strong>：基本数据类型 : 布尔 数值 字符串 undefined null</p></li><li><p><strong>存储原理</strong>：将定义的简单数据类型存储在栈中</p></li></ul></li><li><p><strong>堆：</strong></p><ul><li><strong>存储类型</strong>：复杂数据类型 : 对象 数组 函数</li><li><strong>存储原理：</strong>将定义的变量名存储在栈中，并给一个存储地址：例：0x123123;然后再帮复杂数据存在堆中，每次访问时先访问栈，然后根据地址访问堆中的数据</li></ul></li></ul><h4 id="7-函数的预解析（提前解析）"><a href="#7-函数的预解析（提前解析）" class="headerlink" title="7.函数的预解析（提前解析）"></a>7.函数的预解析（提前解析）</h4><ul><li><p>预解析：浏览器会在代码执行之前，先去解析通读代码中的一些变量</p></li><li><p>预解析会解析：</p><ul><li><strong>var</strong> 声明的变量</li><li>函数</li></ul></li><li><p><strong>var</strong> 声明的变量怎么解析：</p><ul><li>告诉计算机程序,这个变量已经存在,只是当前没有赋值，如果在赋值之前使用变量时，就会得到一个 <strong>undefined</strong> </li></ul></li><li><p>声明式函数会怎么解析：</p><ul><li>如果是声明式函数的创建，那么就会把这段声明式函数创建代码提前告诉浏览器有一个 <strong>fun()</strong> 函数变量，并且给这个变量赋值一个函数的地址 </li></ul></li><li><p>赋值式创建函数怎么解析：</p><ul><li>会告诉浏览器 <strong>fn</strong> 变量可用，但是并没有赋值，在函数中赋值给 <strong>fn</strong> 之前，<strong>fn</strong> 是一个 <strong>undefined</strong> 的变量，那么使用 <strong>fn()</strong> 调用时，会报错：<code>fn is not a function</code></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn()</span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">conlose.log(<span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-全局变量和局部变量"><a href="#8-全局变量和局部变量" class="headerlink" title="8.全局变量和局部变量"></a>8.全局变量和局部变量</h4><ul><li><p>全局变量</p><ul><li>定义在函数之外的变量,称为全局作用域变量/全局变量</li><li>声明在全局的，可以在任何地方使用</li><li>如果在函数局部声明变量没有用 <strong>var</strong>，那么这个变量是全局的，会覆盖之前声明的</li></ul></li><li><p>局部变量</p><ul><li>在局部使用 <strong>var</strong> 声明的变量，只能在局部使用</li><li>包括函数的参数,定义在函数内部的变量,都称为局部作用域变量 / 局部变量， 只能在函数内部使用,如果外部想要直接调用,是不行的</li></ul></li><li><p>作用域链：</p><ul><li>函数去访问变量的时候，会从就近的位置开始去寻找这个变量，直到找到这个变量位置的时候，这个过程叫做作用域链</li></ul></li></ul><h4 id="9-递归函数"><a href="#9-递归函数" class="headerlink" title="9.递归函数"></a>9.递归函数</h4><ul><li><p>定义：一种特殊的函数,就是在函数内部,调用函数自己本身</p></li><li><p>1.调用递归函数,一定要有条件,无条件的调用递归函数,会一直执行调用,不会停止</p></li><li><p>2,调用递归函数,进入递归函数,会由外至内执行,结束递归函数,会从内至外执行</p></li><li><pre><code class="javascript">例：<span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params">num</span>)</span>{            num--;            <span class="keyword">if</span>(num &gt;=<span class="number">1</span>){                fun(num);            }            <span class="comment">// 将执行的输出,写在递归调用之下</span>            <span class="built_in">console</span>.log(num);        }        fun(<span class="number">5</span>);----&gt;将输出<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&lt;!--￼<span class="number">21</span>--&gt;</code></pre></li></ul><h4 id="3、数组的创建方式："><a href="#3、数组的创建方式：" class="headerlink" title="3、数组的创建方式："></a>3、数组的创建方式：</h4><ul><li><strong>1.字面量方式创建</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 变量 = [ 数据<span class="number">1</span> , 数据<span class="number">2</span> , 数据<span class="number">3</span> , ..... ];</span><br></pre></td></tr></table></figure><ul><li><strong>2.构造函数方式 – 创造一个空数组</strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>();，然后通过索引的方法想数组中添加数据</span><br></pre></td></tr></table></figure><h4 id="4-数组的索引下标"><a href="#4-数组的索引下标" class="headerlink" title="4.数组的索引下标"></a>4.数组的索引下标</h4><ul><li>1.索引下标调用数据，从0开始，例：arr[0]; 第一个值   ——–二维数组的调用arr[0][0]</li><li>2.通过索引下标,来修改数组中,存储的单元的数据，对已存在的索引下标,进行赋值,进行的是重复赋值,会覆盖之前存储的数据</li><li>3.通过索引下标,来新增数组的单元，最好是连续的下标，不然中间为赋值的会是empty</li><li>4,通过索引下标,来删除数组的单元,定义数组的length长度属性,通过定义数组的单元个数,来删除数组的单元,从结尾处删除</li></ul><h4 id="5-数组的arr-length"><a href="#5-数组的arr-length" class="headerlink" title="5.数组的arr.length"></a>5.数组的arr.length</h4><ul><li>length表示数组的长度,也就是单元的个数,最大的索引下标 是 length-1 ,我们一般在便利数组时用到</li></ul><h4 id="6-排序算法"><a href="#6-排序算法" class="headerlink" title="6.排序算法"></a>6.排序算法</h4><ul><li><p>冒泡排序</p><ul><li><p><strong>原理</strong>: 相邻的两个单位,比较存储的数据， 如果第一个单元的数据较大,就将两个相邻单元,交换存储数据</p></li><li><p><strong>过程</strong>: 从起始单元开始比较,第一次循环,会选择出一个最大值,放在数组所有单元的最后， 之后,每次循环,都会比较出一个本次循环的最大值,放在当前参与比较单元的最后，之前已经比较选出的单元,不会参与下一次比较</p></li><li><p><strong>优化：</strong></p><ul><li>1, 单次循环,最后一个单元,通过倒数第二个单元,参与比较， 最后一个单元,就不参与单次循环</li><li>2, 之前比较出的最大值,不再参与下一次的比较</li><li>3, n个单元,只要循环比较n-1次,最后就一个单元时,不要再循环比较</li></ul></li><li><p><strong>代码</strong></p><pre><code>​        </code></pre></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=[<span class="number">5</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">3</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=arr.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;=arr.length-i<span class="number">-1</span>;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt;= arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">var</span> map = arr[j];</span><br><span class="line">                    arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>]=map;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><p>选择排序</p><ul><li><p><strong>原理：</strong>先定义循环的起始位置默认为最小值所在位置</p></li><li><p><strong>过程：</strong>从起始位置下一个位置开始,执行循环，如果有位置上的数值,小于,存储索引位置上的数值，就存储这个位置的索引值，循环结束,比较存储的索引,是否是起始位置索引，如果不是,就交换两个位置上的数值，会将本次循环的最小值,放置在循环的起始位置上，再执行多次循环,完成排序</p></li><li><p><strong>核心 :</strong> 找到最小值的索引,与起始位置交换数值，先找索引 在交换数值</p></li><li><p><strong>优化 :</strong> </p><ul><li><p>1,之前比较的数值不参与一次标记            </p></li><li><p>2,n个单元,只要比较n-1次</p><pre><code>​    </code></pre></li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">代码：<span class="keyword">var</span> arr =[<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">11</span>,<span class="number">9</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;=arr.length<span class="number">-1</span><span class="number">-1</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> min=i;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> j=i+<span class="number">1</span>;j&lt;=arr.length<span class="number">-1</span>;j++)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(arr[min] &gt; arr[j])&#123;</span><br><span class="line"></span><br><span class="line">                    min = j;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(min != i)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> map = arr[i];</span><br><span class="line"></span><br><span class="line">                arr[i]=arr[min];</span><br><span class="line"></span><br><span class="line">                arr[min]=map;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h4 id="7-数组的方法"><a href="#7-数组的方法" class="headerlink" title="7.数组的方法"></a>7.数组的方法</h4><h5 id="【1】、push-方法："><a href="#【1】、push-方法：" class="headerlink" title="【1】、push 方法："></a>【1】、push 方法：</h5><ul><li><strong>push</strong> 是用来在数组的末尾添加一个元素的：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 使用 push 方法追加一个元素在末尾</span></span><br><span class="line">arr.push(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><ul><li><strong>push</strong> 方法会直接改变原数组</li><li><strong>push</strong> 方法的返回值：添加之后数组的长度</li></ul><h5 id="【2】、pop-方法："><a href="#【2】、pop-方法：" class="headerlink" title="【2】、pop 方法："></a>【2】、pop 方法：</h5><ul><li><strong>pop</strong> 是用来删除数组末尾的一个元素的：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 使用 pop 方法删除末尾的一个元素</span></span><br><span class="line">arr.pop()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2]</span></span><br></pre></td></tr></table></figure><ul><li><strong>pop</strong> 方法会直接改变原数组</li><li><strong>pop</strong> 方法的返回值：删除掉的那个元素</li></ul><h5 id="【3】、unshift-方法："><a href="#【3】、unshift-方法：" class="headerlink" title="【3】、unshift 方法："></a>【3】、unshift 方法：</h5><ul><li><strong>unshift</strong> 是在数组的最前面添加一个元素：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 使用 unshift 方法想数组的最前面添加一个元素</span></span><br><span class="line">arr.unshift(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [4, 1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li><strong>unshift</strong> 方法会直接改变原数组</li><li><strong>unshift</strong> 方法的返回值：添加之后的数组长度</li></ul><h5 id="【4】、shift-方法："><a href="#【4】、shift-方法：" class="headerlink" title="【4】、shift 方法："></a>【4】、shift 方法：</h5><ul><li><strong>shift</strong> 方法是删除数组最前面的一个元素：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 使用 shift 方法删除数组最前面的一个元素</span></span><br><span class="line">arr.shift()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [2, 3]</span></span><br></pre></td></tr></table></figure><ul><li><strong>shift</strong> 方法会直接改变原数组</li><li><strong>shift</strong> 方法的返回值：删除掉的那个元素</li></ul><h5 id="【5】、splice-方法："><a href="#【5】、splice-方法：" class="headerlink" title="【5】、splice 方法："></a>【5】、splice 方法：</h5><ul><li><p><strong>splice</strong> 是截取数组中的某些内容，按照数组的索引来截取</p></li><li><p>语法：<code>arr.splice(idx,num,value)</code></p><blockquote><p>splice总共有 3 个参数，但是第三个参数可以不写</p><ul><li>idx  ：从哪个索引位置开始</li><li>num  ：截取多少个</li><li>value：替换的新元素</li></ul></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="comment">// 使用 splice 方法截取数组</span></span><br><span class="line">arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="string">'我是新内容'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, '我是新内容', 4, 5]</span></span><br></pre></td></tr></table></figure><ul><li><strong>splice</strong> 方法会直接改变原数组</li><li><strong>splice</strong> 方法的返回值：以数组形式返回被截取的元素</li></ul><h5 id="【6】、reverse-方法："><a href="#【6】、reverse-方法：" class="headerlink" title="【6】、reverse 方法："></a>【6】、reverse 方法：</h5><ul><li><strong>reverse</strong> 是用来反转数组的：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 使用 reverse 方法来反转数组</span></span><br><span class="line">arr.reverse()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [3, 2, 1]</span></span><br></pre></td></tr></table></figure><ul><li><strong>reverse</strong> 方法会直接改变原数组</li><li><strong>reverse</strong> 方法的返回值：返回反转后的数组</li></ul><h5 id="【7】、sort-方法："><a href="#【7】、sort-方法：" class="headerlink" title="【7】、sort 方法："></a>【7】、sort 方法：</h5><ul><li><strong>sort</strong> 方法是用来给数组排序的：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment">// 使用 sort 方法给数组排序</span></span><br><span class="line">arr.sort()</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">12</span>, <span class="number">33</span>, <span class="number">22</span>, <span class="number">21</span>, <span class="number">13</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">44</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b - a <span class="comment">// 从大到小排序</span></span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">var</span> res = arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b; <span class="comment">// 从小到大排序</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> res1 = arr.sort();</span><br></pre></td></tr></table></figure><ul><li><strong>sort</strong> 方法会直接改变原数组</li><li><strong>sort</strong> 方法的返回值：排序之后的数组</li></ul><h5 id="【8】、concat-方法："><a href="#【8】、concat-方法：" class="headerlink" title="【8】、concat 方法："></a>【8】、concat 方法：</h5><ul><li><strong>concat</strong> 方法是把多个数组进行拼接：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// 使用 concat 方法拼接数组</span></span><br><span class="line"><span class="keyword">var</span> newArr = arr.concat([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br></pre></td></tr></table></figure><ul><li><strong>concat</strong> 方法不会改变原数组，而是返回一个新的数组</li><li><strong>concat</strong> 方法的返回值：返回一个拼接好之后的新数组</li></ul><h5 id="【9】、join-方法："><a href="#【9】、join-方法：" class="headerlink" title="【9】、join 方法："></a>【9】、<strong>join</strong> 方法：</h5><ul><li><strong>join</strong> 方法是把数组转化为字符串：</li><li>可以自己定义每一项之间链接的内容 <code>join（要用什么内容链接）</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr.join(<span class="string">'-'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// 1-2-3-4</span></span><br></pre></td></tr></table></figure><ul><li><strong>join</strong> 方法不会改变原数组</li><li><strong>join</strong> 方法的返回值：返回链接好的字符串</li></ul><h5 id="【10】、indexOf-方法："><a href="#【10】、indexOf-方法：" class="headerlink" title="【10】、indexOf 方法："></a>【10】、indexOf 方法：</h5><ul><li><strong>indexOf</strong> 方法判断这个元素是否存在数组当中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> res = arr.indexOf(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [1,2,3,4]</span></span><br><span class="line"><span class="built_in">console</span>.log(res) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li><strong>indexOf</strong> 方法不会改变原数组</li><li><strong>indexOf</strong> 方法的返回值：如果数组中有这个元素，就返回这个元素的索引，没有就返回-1</li></ul><h4 id="8-数组的深浅拷贝"><a href="#8-数组的深浅拷贝" class="headerlink" title="8.数组的深浅拷贝"></a>8.数组的深浅拷贝</h4><h5 id="【1】、浅拷贝"><a href="#【1】、浅拷贝" class="headerlink" title="【1】、浅拷贝"></a>【1】、浅拷贝</h5><ul><li>定义：直接将一个引用数据类型的地址,赋值给另一个变量存储的，两个变量存储的是相同的内存地址,一个操作,另一个也会改变</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">例：var arr1 &#x3D; [1,2,3,4,5];</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; 将arr1 存储的内存地址,赋值给arr2,两个变量存储的是相同的内存地址</span><br><span class="line">        var arr2 &#x3D; arr1;</span><br><span class="line"> </span><br><span class="line">        &#x2F;&#x2F; arr1操作,数组,arr2也会改变</span><br><span class="line">        &#x2F;&#x2F; 因为arr1和arr2,同时存储的是相同的数据,操作的也是同一个数组</span><br><span class="line">        &#x2F;&#x2F; 同理,arr2,操作数组,arr1也会改变</span><br><span class="line">        arr1[0] &#x3D; &#39;北京&#39;;</span><br><span class="line"> </span><br><span class="line">        console.log(arr2);</span><br></pre></td></tr></table></figure><h5 id="【2】、深拷贝"><a href="#【2】、深拷贝" class="headerlink" title="【2】、深拷贝"></a>【2】、深拷贝</h5><ul><li>定义：只复制 引用数据类型中的数值，而不是 复制地址</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">例：<span class="comment">// 只复制arr3中的数据</span></span><br><span class="line">        <span class="keyword">var</span> arr3 = [<span class="string">'北京'</span>,<span class="string">'上海'</span>,<span class="string">'广州'</span>,<span class="string">'重庆'</span>,<span class="string">'天津'</span>];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 循环遍历,获取arr3中的所有数据数值,赋值到新的数组中</span></span><br><span class="line">        <span class="keyword">var</span> arr4 = [];</span><br><span class="line"> </span><br><span class="line">        <span class="comment">// 通过循环,生成arr3的所有索引下标</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span> ; i &lt;= arr3.length<span class="number">-1</span> ; i++)&#123;</span><br><span class="line">            <span class="comment">// arr3[i] 就是获取 arr3中的 存储的 数据信息</span></span><br><span class="line">            <span class="comment">// arr4.push() 将arr3中的数据 arr3[i] , 写入到 arr4中</span></span><br><span class="line">            arr4.push(arr3[i]);</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">console</span>.log(arr4);</span><br><span class="line"> </span><br><span class="line">        arr3[<span class="number">0</span>] = <span class="string">'武汉'</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">console</span>.log(arr3 , arr4);</span><br></pre></td></tr></table></figure><h4 id="9-数组的循环遍历"><a href="#9-数组的循环遍历" class="headerlink" title="9.数组的循环遍历"></a>9.数组的循环遍历</h4><h5 id="方法1-通过for循环-生成所有的索引下标—优点是-可以控制循环的起始和结束"><a href="#方法1-通过for循环-生成所有的索引下标—优点是-可以控制循环的起始和结束" class="headerlink" title="方法1: 通过for循环,生成所有的索引下标—优点是,可以控制循环的起始和结束"></a>方法1: 通过for循环,生成所有的索引下标—优点是,可以控制循环的起始和结束</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例：for(var i &#x3D; 0 ; i &lt;&#x3D; arr.length-1 ; i++)&#123; 程序内容 &#125;</span><br></pre></td></tr></table></figure><h5 id="方法2-通过JavaScript程序-给我们提供的方法来实现循环遍历数组-forEach-function-形参1-形参2-形参3"><a href="#方法2-通过JavaScript程序-给我们提供的方法来实现循环遍历数组-forEach-function-形参1-形参2-形参3" class="headerlink" title="方法2: 通过JavaScript程序,给我们提供的方法来实现循环遍历数组.forEach(function(形参1,形参2,形参3){})"></a>方法2: 通过JavaScript程序,给我们提供的方法来实现循环遍历数组.forEach(function(形参1,形参2,形参3){})</h5><ul><li>形参1: 存储的是当前循环次数时,获取的单元数据</li><li>参数2: 存储的是当前循环次数时,获取的单元索引下标</li><li>参数3: 存储的是原始数组<ul><li><strong>注意：</strong>1.三个形参,不一定都要定义,可以根据实际需求<pre><code>2.形参可以任意定义,只要符合命名规范就可以     3.forEach() 只能循环遍历数组,不能循环遍历对象</code></pre></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">例：var arr &#x3D; [&#39;北京&#39;,&#39;上海&#39;,&#39;广州&#39;,&#39;重庆&#39;,&#39;天津&#39;];</span><br><span class="line">        &#x2F;*</span><br><span class="line">            第一次循环,循环对象是 第一个单元 </span><br><span class="line">                val : 存储数据 &#39;北京&#39;   key : 存储索引 0   arr : 存储原始数组</span><br><span class="line">            第二次循环,循环对象是 第二个单元 </span><br><span class="line">                val : 存储数据 &#39;上海&#39;   key : 存储索引 1   arr : 存储原始数组</span><br><span class="line">            第三次循环,循环对象是 第三个单元 </span><br><span class="line">                val : 存储数据 &#39;广州&#39;   key : 存储索引 2   arr : 存储原始数组</span><br><span class="line">            第四次循环,循环对象是 第四个单元 </span><br><span class="line">                val : 存储数据 &#39;重庆&#39;   key : 存储索引 3   arr : 存储原始数组</span><br><span class="line">            第五次循环,循环对象是 第五个单元 </span><br><span class="line">                val : 存储数据 &#39;天津&#39;   key : 存储索引 4   arr : 存储原始数组</span><br><span class="line">        *&#x2F;</span><br><span class="line">        &#x2F;&#x2F; arr.forEach(function(val,key,arr)&#123;</span><br><span class="line">        &#x2F;&#x2F;     console.log(val,key,arr);</span><br><span class="line">        &#x2F;&#x2F; &#125;)</span><br></pre></td></tr></table></figure><h5 id="方法3：for-var-自定义变量-in-数组-程序-，自定义变量遍历出来会是存储的索引—-一般用于对象遍历"><a href="#方法3：for-var-自定义变量-in-数组-程序-，自定义变量遍历出来会是存储的索引—-一般用于对象遍历" class="headerlink" title="方法3：for(var 自定义变量 in 数组){程序}，自定义变量遍历出来会是存储的索引—-一般用于对象遍历"></a>方法3：for(var 自定义变量 in 数组){程序}，自定义变量遍历出来会是存储的索引—-一般用于对象遍历</h5><pre><code>例：var arr = [&apos;北京&apos;,&apos;上海&apos;,&apos;广州&apos;,&apos;重庆&apos;,&apos;天津&apos;];      for(var key in arr){  // 自定义变量,存储索引 0 1 2 3 4 ....        console.log(key,arr[key]);   // arr[key] 就是索引对应的数据    }一般是针对对象的循环</code></pre><h2 id="十三、字符串的方法"><a href="#十三、字符串的方法" class="headerlink" title="十三、字符串的方法"></a>十三、字符串的方法</h2><h5 id="【1】、split方法："><a href="#【1】、split方法：" class="headerlink" title="【1】、split方法："></a><strong>【1】、split方法：</strong></h5><ul><li>变量.split(‘分隔符’)—-&gt;将字符串转换为数组，转换为的数组内部不能为函数，对象，不会对原理数据有变化，内部的分隔符是以分隔符为间隔符号,将字符串切割为数组，会将分隔符去掉用逗号隔开</li></ul><h5 id="【2】、indexOf-方法"><a href="#【2】、indexOf-方法" class="headerlink" title="【2】、indexOf()方法"></a>【2】、indexOf()方法</h5><ul><li>变量.indexOf() — 字符首次出现的位置—-&gt;返回值为字符所在的索引值</li><li>如果没有改字符，返回-1，该方法采用的全等判断是否有</li></ul><h5 id="【3】、lastindexOf-方法"><a href="#【3】、lastindexOf-方法" class="headerlink" title="【3】、lastindexOf()方法"></a>【3】、lastindexOf()方法</h5><ul><li>变量.lastIndexOf() — 字符最后一次出现的位置—-&gt;返回值为字符所在的索引值</li></ul><h5 id="【4】、字符大写小写方法"><a href="#【4】、字符大写小写方法" class="headerlink" title="【4】、字符大写小写方法"></a>【4】、字符大写小写方法</h5><ul><li><p>所有字符大写：字符串.toUpperCase(),</p></li><li><p>所有字符小写：字符串.toLowerCase()</p></li><li><p>做字符串判断时,有时需要先统一大小写</p></li></ul><h5 id="【5】、charAt-方法-charCodeAt-方法"><a href="#【5】、charAt-方法-charCodeAt-方法" class="headerlink" title="【5】、charAt()方法,charCodeAt()方法"></a><strong>【5】、charAt()方法</strong>,charCodeAt()方法</h5><ul><li>字符串.charAt()—-获取指定位置的字符—&gt;返回对应值的索引值</li><li>字符串.charCodeAt()—-获取指定位置的字符的编码数值—-返回字符在ASCII码表中的数值</li></ul><h5 id="【6】、substring-方法"><a href="#【6】、substring-方法" class="headerlink" title="【6】、substring()方法"></a><strong>【6】、substring()方法</strong></h5><ul><li>字符串.substring()—字符串的截取<ul><li>参数1: 截取起始字符的索引下标</li><li>参数2: 截取结束字符的索引下标</li><li>注：截取的包含首个字符，不包含第二个参数位置的字符</li></ul></li></ul><h5 id="【7】、substr-方法"><a href="#【7】、substr-方法" class="headerlink" title="【7】、substr()方法"></a><strong>【7】、substr()方法</strong></h5><ul><li>字符串.substr()—字符串的截取<ul><li>参数1: 指定截取的起始位置</li><li>参数2: 指定截取的字符长度</li><li>注意：会截取首个字符</li></ul></li></ul><h5 id="【7】、replace-方法"><a href="#【7】、replace-方法" class="headerlink" title="【7】、replace()方法"></a><strong>【7】、replace()方法</strong></h5><ul><li>字符串.replace()—-字符串内容替换函数<ul><li>第一个参数:字符串原有的,要替换没的</li><li>第二个参数:字符串没有的,要新替换进来的</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Javascript基础笔记&quot;&gt;&lt;a href=&quot;#Javascript基础笔记&quot; class=&quot;headerlink&quot; title=&quot;Javascript基础笔记&quot;&gt;&lt;/a&gt;Javascript基础笔记&lt;/h1&gt;&lt;h2 id=&quot;一、-Javascript简介&quot;&gt;
      
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>弹性布局flex</title>
    <link href="http://yoursite.com/2018/08/20/HTML5%E4%B8%8ECSS3-%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/08/20/HTML5%E4%B8%8ECSS3-%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</id>
    <published>2018-08-20T15:08:15.000Z</published>
    <updated>2020-07-12T09:30:34.971Z</updated>
    
    <content type="html"><![CDATA[<h2 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h2><h3 id="语法是添加到父容器上的"><a href="#语法是添加到父容器上的" class="headerlink" title="语法是添加到父容器上的"></a>语法是添加到父容器上的</h3><ul><li><p>display : flex</p></li><li><p>flex-direction: row(默认，行从左往右)/column(列，从上往下)/row-reverse(行,从右往左)/column-reverse(列，从下往上)</p></li><li><p>flex-wrap:nowrap(不换行)/wrap(换行)/wrap-reverse(反向换行)</p></li><li><p>justify-content ; 属性决定了主轴方向上子项的对齐和分布方式</p><ul><li>flex-start ： 子项都去起始位置对齐。</li><li>flex-end ： 子项都去结束位置对齐。</li><li>center ： 子项都去中心位置对齐。</li><li>space-between : 表现为两端对齐。between是中间的意思，意思是多余的空白间距只在元素中间区域分配。 </li><li>space-around : around是环绕的意思，意思是每个flex子项两侧都环绕互不干扰的等宽的空白间距，最终视觉上边缘两侧的空白只有中间空白宽度一半。</li><li>space-evenly : evenly是匀称、平等的意思。也就是视觉上，每个flex子项两侧空白间距完全相等。</li></ul></li><li><p>align-items : 每一行中的子元素上下对齐方式</p><ul><li>flex-start;顶部对齐</li><li>center;居住对齐</li><li>flex-end;底部对齐</li></ul></li><li><p>align-content : 跟justify-content相反的操作。侧轴的对齐方式。(最少需要两行才能看出效果，因为他是多行的一个上下对齐方式)<br>默认：多行下，有几行就会把容器划分为几部分，默认就是stretch拉伸的</p></li></ul><h3 id="语法是添加到子容器上的"><a href="#语法是添加到子容器上的" class="headerlink" title="语法是添加到子容器上的"></a>语法是添加到子容器上的</h3><ul><li><p>order : 排序所有的默认为0，当有元素设置超过1，就应当排在前面</p></li><li><p>flex-grow : 扩展 ( 想看到扩展的效果，必须有空隙 )，当容器未被占满，加入语法使其占位空隙</p><ul><li>0 : 默认值 , 不去扩展</li><li>1 : 去扩展 , 会把空白区域全部沾满</li></ul></li><li><p>flex-shrink : 收缩</p><ul><li>正常默认值是1</li><li>0表示不收缩，.5收缩小一些，2收缩大一些。（大小是跟正常缩放1进行比较的）</li></ul></li><li><p>flex-basis : 跟flex-shrink/flex-grow很像</p><ul><li>flex-shrink/flex-grow是设置一个比例值，flex-basis是设置一个具体值</li></ul></li><li><p>algin-self: 跟align-items操作很像，区别就是只是针对某一个子项</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;弹性布局&quot;&gt;&lt;a href=&quot;#弹性布局&quot; class=&quot;headerlink&quot; title=&quot;弹性布局&quot;&gt;&lt;/a&gt;弹性布局&lt;/h2&gt;&lt;h3 id=&quot;语法是添加到父容器上的&quot;&gt;&lt;a href=&quot;#语法是添加到父容器上的&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML5与CSS3" scheme="http://yoursite.com/tags/HTML5%E4%B8%8ECSS3/"/>
    
  </entry>
  
  <entry>
    <title>网格布局grid</title>
    <link href="http://yoursite.com/2018/08/06/HTML5%E4%B8%8ECSS3-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/08/06/HTML5%E4%B8%8ECSS3-%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80/</id>
    <published>2018-08-06T12:08:58.000Z</published>
    <updated>2020-07-12T09:37:52.759Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网格布局grid"><a href="#网格布局grid" class="headerlink" title="网格布局grid"></a>网格布局grid</h2><h3 id="作用在父类上"><a href="#作用在父类上" class="headerlink" title="作用在父类上"></a>作用在父类上</h3><ul><li><p>display : grid</p></li><li><p>grid-template-columns : 设置列数，        grid-template-rows : 设置行数</p><ul><li>fr单位，注：网格中提供了一个新的单位：fr ( 比例单位 )</li><li>repeat()方法</li></ul></li><li><p>grid-template-areas : 划分区域的</p><ul><li>区域必须是矩形</li></ul></li><li><p>grid-column-gap : 列的间距，grid-row-gap : 行的间距</p><ul><li>grid-gap : 复合写法grid-row-gap  grid-column-gap</li></ul></li><li><p>justify-items : 子项的水平居中方式</p><ul><li>默认 :  stretch 默认值，拉伸。表现为水平或垂直填充。</li><li>start左对齐</li><li>center居中</li><li>end右对齐</li></ul></li><li><p>align-items : 子项的垂直居中方式</p><ul><li>默认 :  stretch 默认值，拉伸。表现为水平或垂直填充。</li><li>start上对齐</li><li>center居中</li><li>end下对齐</li></ul></li><li><p>justify-content : 整体网格的水平对齐方式</p><ul><li>默认：stretch</li><li>start 左对齐</li><li>end 右对齐</li><li>center 居中对齐</li><li>space-between 两端对齐</li><li>space-around中间距离是两边距离两倍</li><li>space-evenly 均匀分布</li></ul></li><li><p>align-content : 整体网格的垂直对齐方式</p><ul><li>与水平对齐方式一致</li></ul></li></ul><h3 id="作用在子项上的"><a href="#作用在子项上的" class="headerlink" title="作用在子项上的"></a>作用在子项上的</h3><ul><li>grid-column-start  水平方向上占据的起始位置</li><li>grid-column-end    水平方向上占据的结束位置</li><li>grid-row-start     垂直方向上占据的起始位置</li><li>grid-row-end       垂直方向上占据的结束位置</li><li>justify-self    子项在水平方向的位置</li><li>algin-self    子项在垂直方向的位置</li></ul><p><em>XMind: ZEN - Trial Version</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;网格布局grid&quot;&gt;&lt;a href=&quot;#网格布局grid&quot; class=&quot;headerlink&quot; title=&quot;网格布局grid&quot;&gt;&lt;/a&gt;网格布局grid&lt;/h2&gt;&lt;h3 id=&quot;作用在父类上&quot;&gt;&lt;a href=&quot;#作用在父类上&quot; class=&quot;headerli
      
    
    </summary>
    
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="HTML5与CSS3" scheme="http://yoursite.com/tags/HTML5%E4%B8%8ECSS3/"/>
    
  </entry>
  
</feed>
